#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BotFactory_Tower

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_BotFactory_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BotFactory_Tower.BP_BotFactory_Tower_C
// 0x00A0 (0x0988 - 0x08E8)
class ABP_BotFactory_Tower_C final : public ABP_BotFactory_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_BotFactory_Tower_C;              // 0x08E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UHWAIPlayComponent*                     AIPlay;                                            // 0x08F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class AHWBotFactory>           BotFactoryToWatch;                                 // 0x08F8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          ShouldApplyGoldFuryEffect;                         // 0x0920(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_921[0x7];                                      // 0x0921(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWCharacter_Base*                      SpawnedCharacter;                                  // 0x0928(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldApplyAncientFuryDebuff;                      // 0x0930(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_931[0x7];                                      // 0x0931(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class AHWBotFactory>           RivalBotFactory;                                   // 0x0938(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class UClass*                                 TowerPadClass;                                     // 0x0960(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_TowerPad_C*                         SpawnedTowerPad;                                   // 0x0968(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TowerPadScale;                                     // 0x0970(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddImmunityTag();
	void ApplyAncientFuryDebuff();
	void ExecuteUbergraph_BP_BotFactory_Tower(int32 EntryPoint);
	void FactoryEmpty(class AHWBotFactory* BotFactory, class AActor* Causer);
	void FactorySpawnedBot(class AHWBotFactory* BotFactory, class AHWCharacter_Base* Bot);
	void InitializeAncientFuryDebuff();
	void InitializeGoldFuryDebuff();
	void OnFactoryEmptied(class AActor* Causer);
	void OnSpawnedBot(class AHWCharacter_Base* characterSpawned);
	void RemoveAncientFuryDebuff();
	void RemoveImmunityTag();
	void SpawnTowerPad();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BotFactory_Tower_C">();
	}
	static class ABP_BotFactory_Tower_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BotFactory_Tower_C>();
	}
};
static_assert(alignof(ABP_BotFactory_Tower_C) == 0x000008, "Wrong alignment on ABP_BotFactory_Tower_C");
static_assert(sizeof(ABP_BotFactory_Tower_C) == 0x000988, "Wrong size on ABP_BotFactory_Tower_C");
static_assert(offsetof(ABP_BotFactory_Tower_C, UberGraphFrame_BP_BotFactory_Tower_C) == 0x0008E8, "Member 'ABP_BotFactory_Tower_C::UberGraphFrame_BP_BotFactory_Tower_C' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_Tower_C, AIPlay) == 0x0008F0, "Member 'ABP_BotFactory_Tower_C::AIPlay' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_Tower_C, BotFactoryToWatch) == 0x0008F8, "Member 'ABP_BotFactory_Tower_C::BotFactoryToWatch' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_Tower_C, ShouldApplyGoldFuryEffect) == 0x000920, "Member 'ABP_BotFactory_Tower_C::ShouldApplyGoldFuryEffect' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_Tower_C, SpawnedCharacter) == 0x000928, "Member 'ABP_BotFactory_Tower_C::SpawnedCharacter' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_Tower_C, ShouldApplyAncientFuryDebuff) == 0x000930, "Member 'ABP_BotFactory_Tower_C::ShouldApplyAncientFuryDebuff' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_Tower_C, RivalBotFactory) == 0x000938, "Member 'ABP_BotFactory_Tower_C::RivalBotFactory' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_Tower_C, TowerPadClass) == 0x000960, "Member 'ABP_BotFactory_Tower_C::TowerPadClass' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_Tower_C, SpawnedTowerPad) == 0x000968, "Member 'ABP_BotFactory_Tower_C::SpawnedTowerPad' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_Tower_C, TowerPadScale) == 0x000970, "Member 'ABP_BotFactory_Tower_C::TowerPadScale' has a wrong offset!");

}

