#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_C_Store_CurrencyPurchase_Entry

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "UMG_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function WBP_C_Store_CurrencyPurchase_Entry.WBP_C_Store_CurrencyPurchase_Entry_C.DisplayCurrency
// 0x0020 (0x0020 - 0x0000)
struct WBP_C_Store_CurrencyPurchase_Entry_C_DisplayCurrency final
{
public:
	const class URHCurrency*                      CURRENCY;                                          // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetItemName_ReturnValue;                  // 0x0008(0x0018)()
};
static_assert(alignof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayCurrency) == 0x000008, "Wrong alignment on WBP_C_Store_CurrencyPurchase_Entry_C_DisplayCurrency");
static_assert(sizeof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayCurrency) == 0x000020, "Wrong size on WBP_C_Store_CurrencyPurchase_Entry_C_DisplayCurrency");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayCurrency, CURRENCY) == 0x000000, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayCurrency::CURRENCY' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayCurrency, CallFunc_GetItemName_ReturnValue) == 0x000008, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayCurrency::CallFunc_GetItemName_ReturnValue' has a wrong offset!");

// Function WBP_C_Store_CurrencyPurchase_Entry.WBP_C_Store_CurrencyPurchase_Entry_C.DisplayImages
// 0x0050 (0x0050 - 0x0000)
struct WBP_C_Store_CurrencyPurchase_Entry_C_DisplayImages final
{
public:
	TSoftObjectPtr<class UTexture2D>              Image_0;                                           // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              SplashImage;                                       // 0x0028(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayImages) == 0x000008, "Wrong alignment on WBP_C_Store_CurrencyPurchase_Entry_C_DisplayImages");
static_assert(sizeof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayImages) == 0x000050, "Wrong size on WBP_C_Store_CurrencyPurchase_Entry_C_DisplayImages");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayImages, Image_0) == 0x000000, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayImages::Image_0' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayImages, SplashImage) == 0x000028, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayImages::SplashImage' has a wrong offset!");

// Function WBP_C_Store_CurrencyPurchase_Entry.WBP_C_Store_CurrencyPurchase_Entry_C.DisplayLoadingPriceState
// 0x0009 (0x0009 - 0x0000)
struct WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLoadingPriceState final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLoadingPriceState) == 0x000001, "Wrong alignment on WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLoadingPriceState");
static_assert(sizeof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLoadingPriceState) == 0x000009, "Wrong size on WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLoadingPriceState");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLoadingPriceState, bIsLoading) == 0x000000, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLoadingPriceState::bIsLoading' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLoadingPriceState, Temp_bool_Variable) == 0x000001, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLoadingPriceState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLoadingPriceState, Temp_byte_Variable) == 0x000002, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLoadingPriceState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLoadingPriceState, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLoadingPriceState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLoadingPriceState, Temp_bool_Variable_1) == 0x000004, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLoadingPriceState::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLoadingPriceState, Temp_byte_Variable_2) == 0x000005, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLoadingPriceState::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLoadingPriceState, Temp_byte_Variable_3) == 0x000006, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLoadingPriceState::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLoadingPriceState, K2Node_Select_Default) == 0x000007, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLoadingPriceState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLoadingPriceState, K2Node_Select_Default_1) == 0x000008, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLoadingPriceState::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_C_Store_CurrencyPurchase_Entry.WBP_C_Store_CurrencyPurchase_Entry_C.DisplayLootPrice
// 0x0010 (0x0010 - 0x0000)
struct WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLootPrice final
{
public:
	class URHStoreItemPrice*                      PriceItem;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           PriceGroup;                                        // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLootPrice) == 0x000008, "Wrong alignment on WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLootPrice");
static_assert(sizeof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLootPrice) == 0x000010, "Wrong size on WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLootPrice");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLootPrice, PriceItem) == 0x000000, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLootPrice::PriceItem' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLootPrice, PriceGroup) == 0x000008, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayLootPrice::PriceGroup' has a wrong offset!");

// Function WBP_C_Store_CurrencyPurchase_Entry.WBP_C_Store_CurrencyPurchase_Entry_C.DisplayPortalOffer
// 0x0008 (0x0008 - 0x0000)
struct WBP_C_Store_CurrencyPurchase_Entry_C_DisplayPortalOffer final
{
public:
	const class URHPortalOffer*                   PortalOffer;                                       // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayPortalOffer) == 0x000008, "Wrong alignment on WBP_C_Store_CurrencyPurchase_Entry_C_DisplayPortalOffer");
static_assert(sizeof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayPortalOffer) == 0x000008, "Wrong size on WBP_C_Store_CurrencyPurchase_Entry_C_DisplayPortalOffer");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayPortalOffer, PortalOffer) == 0x000000, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayPortalOffer::PortalOffer' has a wrong offset!");

// Function WBP_C_Store_CurrencyPurchase_Entry.WBP_C_Store_CurrencyPurchase_Entry_C.DisplayQuantities
// 0x0130 (0x0130 - 0x0000)
struct WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities final
{
public:
	int32                                         Quantity;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BonusQuantity;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0010(0x0018)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x0028(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0040(0x0050)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0090(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00E0(0x0010)(ReferenceParm)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00F8(0x0018)()
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_2;             // 0x0118(0x0018)()
};
static_assert(alignof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities) == 0x000008, "Wrong alignment on WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities");
static_assert(sizeof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities) == 0x000130, "Wrong size on WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities, Quantity) == 0x000000, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities::Quantity' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities, BonusQuantity) == 0x000004, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities::BonusQuantity' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities, Temp_bool_Variable) == 0x000008, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities, Temp_byte_Variable) == 0x000009, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities, Temp_byte_Variable_1) == 0x00000A, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities, CallFunc_Conv_IntToText_ReturnValue) == 0x000010, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities, CallFunc_Conv_IntToText_ReturnValue_1) == 0x000028, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities, K2Node_MakeStruct_FormatArgumentData) == 0x000040, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities, K2Node_MakeStruct_FormatArgumentData_1) == 0x000090, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities, K2Node_MakeArray_Array) == 0x0000E0, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities, CallFunc_Greater_IntInt_ReturnValue) == 0x0000F0, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities, CallFunc_Format_ReturnValue) == 0x0000F8, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities, K2Node_Select_Default) == 0x000110, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities, CallFunc_Conv_IntToText_ReturnValue_2) == 0x000118, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_DisplayQuantities::CallFunc_Conv_IntToText_ReturnValue_2' has a wrong offset!");

// Function WBP_C_Store_CurrencyPurchase_Entry.WBP_C_Store_CurrencyPurchase_Entry_C.ExecuteUbergraph_WBP_C_Store_CurrencyPurchase_Entry
// 0x0004 (0x0004 - 0x0000)
struct WBP_C_Store_CurrencyPurchase_Entry_C_ExecuteUbergraph_WBP_C_Store_CurrencyPurchase_Entry final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_Store_CurrencyPurchase_Entry_C_ExecuteUbergraph_WBP_C_Store_CurrencyPurchase_Entry) == 0x000004, "Wrong alignment on WBP_C_Store_CurrencyPurchase_Entry_C_ExecuteUbergraph_WBP_C_Store_CurrencyPurchase_Entry");
static_assert(sizeof(WBP_C_Store_CurrencyPurchase_Entry_C_ExecuteUbergraph_WBP_C_Store_CurrencyPurchase_Entry) == 0x000004, "Wrong size on WBP_C_Store_CurrencyPurchase_Entry_C_ExecuteUbergraph_WBP_C_Store_CurrencyPurchase_Entry");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_ExecuteUbergraph_WBP_C_Store_CurrencyPurchase_Entry, EntryPoint) == 0x000000, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_ExecuteUbergraph_WBP_C_Store_CurrencyPurchase_Entry::EntryPoint' has a wrong offset!");

// Function WBP_C_Store_CurrencyPurchase_Entry.WBP_C_Store_CurrencyPurchase_Entry_C.BP_GetDesiredFocusTarget
// 0x0008 (0x0008 - 0x0000)
struct WBP_C_Store_CurrencyPurchase_Entry_C_BP_GetDesiredFocusTarget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_Store_CurrencyPurchase_Entry_C_BP_GetDesiredFocusTarget) == 0x000008, "Wrong alignment on WBP_C_Store_CurrencyPurchase_Entry_C_BP_GetDesiredFocusTarget");
static_assert(sizeof(WBP_C_Store_CurrencyPurchase_Entry_C_BP_GetDesiredFocusTarget) == 0x000008, "Wrong size on WBP_C_Store_CurrencyPurchase_Entry_C_BP_GetDesiredFocusTarget");
static_assert(offsetof(WBP_C_Store_CurrencyPurchase_Entry_C_BP_GetDesiredFocusTarget, ReturnValue) == 0x000000, "Member 'WBP_C_Store_CurrencyPurchase_Entry_C_BP_GetDesiredFocusTarget::ReturnValue' has a wrong offset!");

}

