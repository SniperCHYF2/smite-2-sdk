#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InteractableComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "EJungleTribes_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Hemingway_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_InteractableComponent.BP_InteractableComponent_C
// 0x0120 (0x0340 - 0x0220)
class UBP_InteractableComponent_C final : public UHWInteractableComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          ShouldCheckTeams;                                  // 0x0228(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldTeamsMatch;                                  // 0x0229(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22A[0x2];                                      // 0x022A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentOwningTeam;                                 // 0x022C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              InteractionInProgress;                             // 0x0230(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              InteractionCancelled;                              // 0x0240(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FText                                   InteractablePrompt;                                // 0x0250(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UWBP_G_V1_InteractPrompt_C*             ClientInteractionWidget;                           // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldCancelOnEndOverlap;                         // 0x0270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InfiniteChannel;                                   // 0x0271(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldCheckRenown;                                 // 0x0272(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJungleTribes                                 TribeToCheck;                                      // 0x0273(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RenownLevelRequired;                               // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldCheckOverrideTags;                           // 0x0278(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  OverrideTags;                                      // 0x0280(0x0020)(Edit, BlueprintVisible)
	bool                                          ShouldCheckCooldownTags;                           // 0x02A0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CooldownTags;                                      // 0x02A8(0x0020)(Edit, BlueprintVisible)
	class AActor*                                 LocalInstigator;                                   // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceHideWidget;                                   // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* InteractInstigator)> InteractionCompleted;           // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UClass*                                 ChannelingEffect;                                  // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            ChannelingEffectHandle;                            // 0x02F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldCheckTags;                                   // 0x02F8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  MustHaveTags;                                      // 0x0300(0x0020)(Edit, BlueprintVisible)
	struct FTimerHandle                           ErrorMessage;                                      // 0x0320(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FText                                   CachedText;                                        // 0x0328(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void DisplayErrorMessage(const class FText& ErrorMessage_0);
	void EndInteraction(class AActor* InteractInstigator, const bool bWasCancelled);
	void ExecuteUbergraph_BP_InteractableComponent(int32 EntryPoint);
	void GetInteractionWidget();
	void GetTeamInfamy(int32 TeamId, EJungleTribes Tribe, struct FS_TribeRenown* Infamy);
	void IsClientOnCooldown(bool* IsOnCooldown);
	void MulticastDisplayErrorMessage(class AActor* Instigator, const class FText& ErrorMessage_0);
	void OnInteractFieldBeginOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnInteractFieldEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void ReceiveBeginPlay();
	void SetCancelVisual();
	void StartInteraction(class AActor* InteractInstigator);
	void UpdateCooldownSwitch(bool* Return);
	void UpdateInteractHUDWidget();
	void UpdateOwningTeam(int32 CurrentOwningTeam_0);
	void UpdatePromptVisuals(const bool bShowPrompt);

	bool CanEverInteractWith(const class AActor* InteractInstigator) const;
	bool CanInteractWith(const class AActor* InteractInstigator) const;
	void CheckCooldownTag(class AActor* TeamMemberActor, bool* HasMatchingCooldownTag) const;
	void CheckInteractCompatibility(class AActor* Instigator, bool* IsCompatible) const;
	void CheckOverrideTag(class AActor* TeamMemberActor, bool* InteractionAllowed) const;
	void CheckRenownLevel(class AActor* TeamMemberActor, bool* InteractionAllowed) const;
	void CheckTag(class AActor* TeamMemberActor, bool* HasMatchingTag) const;
	void CheckTeams(class AActor* TeamMemberActor, bool* InteractionAllowed) const;
	void GetCooldownInfoForWidget(class AActor* TeamMemberActor, float* CooldownDuration, double* TotalCooldownDuration) const;
	void GetOwningTeam(int32* OwningTeam) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_InteractableComponent_C">();
	}
	static class UBP_InteractableComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_InteractableComponent_C>();
	}
};
static_assert(alignof(UBP_InteractableComponent_C) == 0x000008, "Wrong alignment on UBP_InteractableComponent_C");
static_assert(sizeof(UBP_InteractableComponent_C) == 0x000340, "Wrong size on UBP_InteractableComponent_C");
static_assert(offsetof(UBP_InteractableComponent_C, UberGraphFrame) == 0x000220, "Member 'UBP_InteractableComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_InteractableComponent_C, ShouldCheckTeams) == 0x000228, "Member 'UBP_InteractableComponent_C::ShouldCheckTeams' has a wrong offset!");
static_assert(offsetof(UBP_InteractableComponent_C, ShouldTeamsMatch) == 0x000229, "Member 'UBP_InteractableComponent_C::ShouldTeamsMatch' has a wrong offset!");
static_assert(offsetof(UBP_InteractableComponent_C, CurrentOwningTeam) == 0x00022C, "Member 'UBP_InteractableComponent_C::CurrentOwningTeam' has a wrong offset!");
static_assert(offsetof(UBP_InteractableComponent_C, InteractionInProgress) == 0x000230, "Member 'UBP_InteractableComponent_C::InteractionInProgress' has a wrong offset!");
static_assert(offsetof(UBP_InteractableComponent_C, InteractionCancelled) == 0x000240, "Member 'UBP_InteractableComponent_C::InteractionCancelled' has a wrong offset!");
static_assert(offsetof(UBP_InteractableComponent_C, InteractablePrompt) == 0x000250, "Member 'UBP_InteractableComponent_C::InteractablePrompt' has a wrong offset!");
static_assert(offsetof(UBP_InteractableComponent_C, ClientInteractionWidget) == 0x000268, "Member 'UBP_InteractableComponent_C::ClientInteractionWidget' has a wrong offset!");
static_assert(offsetof(UBP_InteractableComponent_C, bShouldCancelOnEndOverlap) == 0x000270, "Member 'UBP_InteractableComponent_C::bShouldCancelOnEndOverlap' has a wrong offset!");
static_assert(offsetof(UBP_InteractableComponent_C, InfiniteChannel) == 0x000271, "Member 'UBP_InteractableComponent_C::InfiniteChannel' has a wrong offset!");
static_assert(offsetof(UBP_InteractableComponent_C, ShouldCheckRenown) == 0x000272, "Member 'UBP_InteractableComponent_C::ShouldCheckRenown' has a wrong offset!");
static_assert(offsetof(UBP_InteractableComponent_C, TribeToCheck) == 0x000273, "Member 'UBP_InteractableComponent_C::TribeToCheck' has a wrong offset!");
static_assert(offsetof(UBP_InteractableComponent_C, RenownLevelRequired) == 0x000274, "Member 'UBP_InteractableComponent_C::RenownLevelRequired' has a wrong offset!");
static_assert(offsetof(UBP_InteractableComponent_C, ShouldCheckOverrideTags) == 0x000278, "Member 'UBP_InteractableComponent_C::ShouldCheckOverrideTags' has a wrong offset!");
static_assert(offsetof(UBP_InteractableComponent_C, OverrideTags) == 0x000280, "Member 'UBP_InteractableComponent_C::OverrideTags' has a wrong offset!");
static_assert(offsetof(UBP_InteractableComponent_C, ShouldCheckCooldownTags) == 0x0002A0, "Member 'UBP_InteractableComponent_C::ShouldCheckCooldownTags' has a wrong offset!");
static_assert(offsetof(UBP_InteractableComponent_C, CooldownTags) == 0x0002A8, "Member 'UBP_InteractableComponent_C::CooldownTags' has a wrong offset!");
static_assert(offsetof(UBP_InteractableComponent_C, LocalInstigator) == 0x0002C8, "Member 'UBP_InteractableComponent_C::LocalInstigator' has a wrong offset!");
static_assert(offsetof(UBP_InteractableComponent_C, ForceHideWidget) == 0x0002D0, "Member 'UBP_InteractableComponent_C::ForceHideWidget' has a wrong offset!");
static_assert(offsetof(UBP_InteractableComponent_C, InteractionCompleted) == 0x0002D8, "Member 'UBP_InteractableComponent_C::InteractionCompleted' has a wrong offset!");
static_assert(offsetof(UBP_InteractableComponent_C, ChannelingEffect) == 0x0002E8, "Member 'UBP_InteractableComponent_C::ChannelingEffect' has a wrong offset!");
static_assert(offsetof(UBP_InteractableComponent_C, ChannelingEffectHandle) == 0x0002F0, "Member 'UBP_InteractableComponent_C::ChannelingEffectHandle' has a wrong offset!");
static_assert(offsetof(UBP_InteractableComponent_C, ShouldCheckTags) == 0x0002F8, "Member 'UBP_InteractableComponent_C::ShouldCheckTags' has a wrong offset!");
static_assert(offsetof(UBP_InteractableComponent_C, MustHaveTags) == 0x000300, "Member 'UBP_InteractableComponent_C::MustHaveTags' has a wrong offset!");
static_assert(offsetof(UBP_InteractableComponent_C, ErrorMessage) == 0x000320, "Member 'UBP_InteractableComponent_C::ErrorMessage' has a wrong offset!");
static_assert(offsetof(UBP_InteractableComponent_C, CachedText) == 0x000328, "Member 'UBP_InteractableComponent_C::CachedText' has a wrong offset!");

}

