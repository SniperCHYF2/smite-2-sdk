#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_S_Settings_KeybinderKeyEntry

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "InputCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_S_Settings_KeybinderKeyEntry.WBP_S_Settings_KeybinderKeyEntry_C.DisplayGamepadKeys
// 0x0010 (0x0010 - 0x0000)
struct WBP_S_Settings_KeybinderKeyEntry_C_DisplayGamepadKeys final
{
public:
	TArray<struct FKey>                           Keys;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_S_Settings_KeybinderKeyEntry_C_DisplayGamepadKeys) == 0x000008, "Wrong alignment on WBP_S_Settings_KeybinderKeyEntry_C_DisplayGamepadKeys");
static_assert(sizeof(WBP_S_Settings_KeybinderKeyEntry_C_DisplayGamepadKeys) == 0x000010, "Wrong size on WBP_S_Settings_KeybinderKeyEntry_C_DisplayGamepadKeys");
static_assert(offsetof(WBP_S_Settings_KeybinderKeyEntry_C_DisplayGamepadKeys, Keys) == 0x000000, "Member 'WBP_S_Settings_KeybinderKeyEntry_C_DisplayGamepadKeys::Keys' has a wrong offset!");

// Function WBP_S_Settings_KeybinderKeyEntry.WBP_S_Settings_KeybinderKeyEntry_C.DisplayKeyboardKeys
// 0x0028 (0x0028 - 0x0000)
struct WBP_S_Settings_KeybinderKeyEntry_C_DisplayKeyboardKeys final
{
public:
	TArray<struct FKey>                           Keys;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   KeyText;                                           // 0x0010(0x0018)(Edit, BlueprintVisible)
};
static_assert(alignof(WBP_S_Settings_KeybinderKeyEntry_C_DisplayKeyboardKeys) == 0x000008, "Wrong alignment on WBP_S_Settings_KeybinderKeyEntry_C_DisplayKeyboardKeys");
static_assert(sizeof(WBP_S_Settings_KeybinderKeyEntry_C_DisplayKeyboardKeys) == 0x000028, "Wrong size on WBP_S_Settings_KeybinderKeyEntry_C_DisplayKeyboardKeys");
static_assert(offsetof(WBP_S_Settings_KeybinderKeyEntry_C_DisplayKeyboardKeys, Keys) == 0x000000, "Member 'WBP_S_Settings_KeybinderKeyEntry_C_DisplayKeyboardKeys::Keys' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_KeybinderKeyEntry_C_DisplayKeyboardKeys, KeyText) == 0x000010, "Member 'WBP_S_Settings_KeybinderKeyEntry_C_DisplayKeyboardKeys::KeyText' has a wrong offset!");

// Function WBP_S_Settings_KeybinderKeyEntry.WBP_S_Settings_KeybinderKeyEntry_C.DisplayKeySelectorEnabled
// 0x0006 (0x0006 - 0x0000)
struct WBP_S_Settings_KeybinderKeyEntry_C_DisplayKeySelectorEnabled final
{
public:
	bool                                          bIsKeyboard;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSelectorIsEnabled;                                // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_Settings_KeybinderKeyEntry_C_DisplayKeySelectorEnabled) == 0x000001, "Wrong alignment on WBP_S_Settings_KeybinderKeyEntry_C_DisplayKeySelectorEnabled");
static_assert(sizeof(WBP_S_Settings_KeybinderKeyEntry_C_DisplayKeySelectorEnabled) == 0x000006, "Wrong size on WBP_S_Settings_KeybinderKeyEntry_C_DisplayKeySelectorEnabled");
static_assert(offsetof(WBP_S_Settings_KeybinderKeyEntry_C_DisplayKeySelectorEnabled, bIsKeyboard) == 0x000000, "Member 'WBP_S_Settings_KeybinderKeyEntry_C_DisplayKeySelectorEnabled::bIsKeyboard' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_KeybinderKeyEntry_C_DisplayKeySelectorEnabled, bSelectorIsEnabled) == 0x000001, "Member 'WBP_S_Settings_KeybinderKeyEntry_C_DisplayKeySelectorEnabled::bSelectorIsEnabled' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_KeybinderKeyEntry_C_DisplayKeySelectorEnabled, Temp_byte_Variable) == 0x000002, "Member 'WBP_S_Settings_KeybinderKeyEntry_C_DisplayKeySelectorEnabled::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_KeybinderKeyEntry_C_DisplayKeySelectorEnabled, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_S_Settings_KeybinderKeyEntry_C_DisplayKeySelectorEnabled::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_KeybinderKeyEntry_C_DisplayKeySelectorEnabled, Temp_bool_Variable) == 0x000004, "Member 'WBP_S_Settings_KeybinderKeyEntry_C_DisplayKeySelectorEnabled::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_KeybinderKeyEntry_C_DisplayKeySelectorEnabled, K2Node_Select_Default) == 0x000005, "Member 'WBP_S_Settings_KeybinderKeyEntry_C_DisplayKeySelectorEnabled::K2Node_Select_Default' has a wrong offset!");

// Function WBP_S_Settings_KeybinderKeyEntry.WBP_S_Settings_KeybinderKeyEntry_C.DisplayLabelText
// 0x0018 (0x0018 - 0x0000)
struct WBP_S_Settings_KeybinderKeyEntry_C_DisplayLabelText final
{
public:
	class FText                                   LabelText;                                         // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_S_Settings_KeybinderKeyEntry_C_DisplayLabelText) == 0x000008, "Wrong alignment on WBP_S_Settings_KeybinderKeyEntry_C_DisplayLabelText");
static_assert(sizeof(WBP_S_Settings_KeybinderKeyEntry_C_DisplayLabelText) == 0x000018, "Wrong size on WBP_S_Settings_KeybinderKeyEntry_C_DisplayLabelText");
static_assert(offsetof(WBP_S_Settings_KeybinderKeyEntry_C_DisplayLabelText, LabelText) == 0x000000, "Member 'WBP_S_Settings_KeybinderKeyEntry_C_DisplayLabelText::LabelText' has a wrong offset!");

// Function WBP_S_Settings_KeybinderKeyEntry.WBP_S_Settings_KeybinderKeyEntry_C.ExecuteUbergraph_WBP_S_Settings_KeybinderKeyEntry
// 0x0004 (0x0004 - 0x0000)
struct WBP_S_Settings_KeybinderKeyEntry_C_ExecuteUbergraph_WBP_S_Settings_KeybinderKeyEntry final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_Settings_KeybinderKeyEntry_C_ExecuteUbergraph_WBP_S_Settings_KeybinderKeyEntry) == 0x000004, "Wrong alignment on WBP_S_Settings_KeybinderKeyEntry_C_ExecuteUbergraph_WBP_S_Settings_KeybinderKeyEntry");
static_assert(sizeof(WBP_S_Settings_KeybinderKeyEntry_C_ExecuteUbergraph_WBP_S_Settings_KeybinderKeyEntry) == 0x000004, "Wrong size on WBP_S_Settings_KeybinderKeyEntry_C_ExecuteUbergraph_WBP_S_Settings_KeybinderKeyEntry");
static_assert(offsetof(WBP_S_Settings_KeybinderKeyEntry_C_ExecuteUbergraph_WBP_S_Settings_KeybinderKeyEntry, EntryPoint) == 0x000000, "Member 'WBP_S_Settings_KeybinderKeyEntry_C_ExecuteUbergraph_WBP_S_Settings_KeybinderKeyEntry::EntryPoint' has a wrong offset!");

// Function WBP_S_Settings_KeybinderKeyEntry.WBP_S_Settings_KeybinderKeyEntry_C.OnKeyDown
// 0x0210 (0x0210 - 0x0000)
struct WBP_S_Settings_KeybinderKeyEntry_C_OnKeyDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0038(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0078(0x00B8)(Parm, OutParm, ReturnParm)
	struct FKey                                   CallFunc_GetKey_ReturnValue;                       // 0x0130(0x0018)(HasGetValueTypeHash)
	struct FEventReply                            K2Node_MakeStruct_EventReply;                      // 0x0148(0x00B8)()
	class FName                                   CallFunc_GetKeyName_ReturnValue;                   // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_Settings_KeybinderKeyEntry_C_OnKeyDown) == 0x000008, "Wrong alignment on WBP_S_Settings_KeybinderKeyEntry_C_OnKeyDown");
static_assert(sizeof(WBP_S_Settings_KeybinderKeyEntry_C_OnKeyDown) == 0x000210, "Wrong size on WBP_S_Settings_KeybinderKeyEntry_C_OnKeyDown");
static_assert(offsetof(WBP_S_Settings_KeybinderKeyEntry_C_OnKeyDown, MyGeometry) == 0x000000, "Member 'WBP_S_Settings_KeybinderKeyEntry_C_OnKeyDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_KeybinderKeyEntry_C_OnKeyDown, InKeyEvent) == 0x000038, "Member 'WBP_S_Settings_KeybinderKeyEntry_C_OnKeyDown::InKeyEvent' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_KeybinderKeyEntry_C_OnKeyDown, ReturnValue) == 0x000078, "Member 'WBP_S_Settings_KeybinderKeyEntry_C_OnKeyDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_KeybinderKeyEntry_C_OnKeyDown, CallFunc_GetKey_ReturnValue) == 0x000130, "Member 'WBP_S_Settings_KeybinderKeyEntry_C_OnKeyDown::CallFunc_GetKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_KeybinderKeyEntry_C_OnKeyDown, K2Node_MakeStruct_EventReply) == 0x000148, "Member 'WBP_S_Settings_KeybinderKeyEntry_C_OnKeyDown::K2Node_MakeStruct_EventReply' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_KeybinderKeyEntry_C_OnKeyDown, CallFunc_GetKeyName_ReturnValue) == 0x000200, "Member 'WBP_S_Settings_KeybinderKeyEntry_C_OnKeyDown::CallFunc_GetKeyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_KeybinderKeyEntry_C_OnKeyDown, K2Node_SwitchName_CmpSuccess) == 0x000208, "Member 'WBP_S_Settings_KeybinderKeyEntry_C_OnKeyDown::K2Node_SwitchName_CmpSuccess' has a wrong offset!");

// Function WBP_S_Settings_KeybinderKeyEntry.WBP_S_Settings_KeybinderKeyEntry_C.BP_GetDesiredFocusTarget
// 0x0008 (0x0008 - 0x0000)
struct WBP_S_Settings_KeybinderKeyEntry_C_BP_GetDesiredFocusTarget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_Settings_KeybinderKeyEntry_C_BP_GetDesiredFocusTarget) == 0x000008, "Wrong alignment on WBP_S_Settings_KeybinderKeyEntry_C_BP_GetDesiredFocusTarget");
static_assert(sizeof(WBP_S_Settings_KeybinderKeyEntry_C_BP_GetDesiredFocusTarget) == 0x000008, "Wrong size on WBP_S_Settings_KeybinderKeyEntry_C_BP_GetDesiredFocusTarget");
static_assert(offsetof(WBP_S_Settings_KeybinderKeyEntry_C_BP_GetDesiredFocusTarget, ReturnValue) == 0x000000, "Member 'WBP_S_Settings_KeybinderKeyEntry_C_BP_GetDesiredFocusTarget::ReturnValue' has a wrong offset!");

}

