#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_GodBot_SetFocus

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "Hemingway_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.CanFocusCurrentTarget
// 0x01A8 (0x01A8 - 0x0000)
struct BTS_GodBot_SetFocus_C_CanFocusCurrentTarget final
{
public:
	class AActor*                                 CurrentTargetActor;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          OwnerController;                                   // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CanTarget;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWCharacter_Base*                      CachedTargetCharacter;                             // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        Cached2DDistanceSquared;                           // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWAdvantageTypes                             MassiveDisadvantage;                               // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWCharacter_Base*                      K2Node_DynamicCast_AsHWCharacter_Base;             // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Square_ReturnValue;                       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetImmediateMoveDestination_ReturnValue;  // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      K2Node_DynamicCast_AsHWCharacter_Base_1;           // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPawnMovementComponent*                 CallFunc_GetMovementComponent_ReturnValue;         // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance2DSquared_ReturnValue;     // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue;              // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput; // 0x00E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance2DSquared_ReturnValue_1;   // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue_1;            // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0182(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0183(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_185[0x3];                                      // 0x0185(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetBlackboardValueAsName_ReturnValue;     // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Square_ReturnValue_1;                     // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_2;          // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x019A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x019B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x019C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x019D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19E[0x2];                                      // 0x019E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Less_DoubleDouble_B_ImplicitCast;         // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget) == 0x000008, "Wrong alignment on BTS_GodBot_SetFocus_C_CanFocusCurrentTarget");
static_assert(sizeof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget) == 0x0001A8, "Wrong size on BTS_GodBot_SetFocus_C_CanFocusCurrentTarget");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CurrentTargetActor) == 0x000000, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CurrentTargetActor' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, ControlledPawn) == 0x000008, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, OwnerController) == 0x000010, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CanTarget) == 0x000018, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CanTarget' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CachedTargetCharacter) == 0x000020, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CachedTargetCharacter' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, Cached2DDistanceSquared) == 0x000028, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::Cached2DDistanceSquared' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, MassiveDisadvantage) == 0x000030, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::MassiveDisadvantage' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, K2Node_DynamicCast_AsHWCharacter_Base) == 0x000038, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::K2Node_DynamicCast_AsHWCharacter_Base' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_Square_ReturnValue) == 0x000048, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_Square_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_GetImmediateMoveDestination_ReturnValue) == 0x000050, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_GetImmediateMoveDestination_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, K2Node_DynamicCast_AsHWCharacter_Base_1) == 0x000068, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::K2Node_DynamicCast_AsHWCharacter_Base_1' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, K2Node_DynamicCast_bSuccess_1) == 0x000070, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000078, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_GetMovementComponent_ReturnValue) == 0x000090, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_GetMovementComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000098, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_Vector_Distance2DSquared_ReturnValue) == 0x0000B0, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_Vector_Distance2DSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_Vector_Normal2D_ReturnValue) == 0x0000B8, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_Vector_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x0000D0, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x0000E8, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x0000F8, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_Not_PreBool_ReturnValue) == 0x0000F9, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x000100, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_Vector_Distance2DSquared_ReturnValue_1) == 0x000118, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_Vector_Distance2DSquared_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_FindLookAtRotation_ReturnValue) == 0x000120, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000138, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_GetForwardVector_ReturnValue) == 0x000140, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_Vector_Normal2D_ReturnValue_1) == 0x000158, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_Vector_Normal2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x000170, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_Dot_VectorVector_ReturnValue) == 0x000178, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000180, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_BooleanOR_ReturnValue) == 0x000181, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_BooleanOR_ReturnValue_1) == 0x000182, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_Not_PreBool_ReturnValue_1) == 0x000183, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_BooleanOR_ReturnValue_2) == 0x000184, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_GetBlackboardValueAsName_ReturnValue) == 0x000188, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_GetBlackboardValueAsName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_Square_ReturnValue_1) == 0x000190, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_Square_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_NotEqual_NameName_ReturnValue) == 0x000198, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_Less_DoubleDouble_ReturnValue_2) == 0x000199, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_Less_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_BooleanOR_ReturnValue_3) == 0x00019A, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_BooleanAND_ReturnValue) == 0x00019B, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_BooleanAND_ReturnValue_1) == 0x00019C, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_BooleanAND_ReturnValue_2) == 0x00019D, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_CanFocusCurrentTarget, CallFunc_Less_DoubleDouble_B_ImplicitCast) == 0x0001A0, "Member 'BTS_GodBot_SetFocus_C_CanFocusCurrentTarget::CallFunc_Less_DoubleDouble_B_ImplicitCast' has a wrong offset!");

// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.DetectRapidDirectionChange
// 0x00B8 (0x00B8 - 0x0000)
struct BTS_GodBot_SetFocus_C_DetectRapidDirectionChange final
{
public:
	class AAIController*                          InController;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  InPawn;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentMoveDirection;                              // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0028(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0040(0x0008)(NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetImmediateMoveDestination_ReturnValue;  // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_GodBot_SetFocus_C_DetectRapidDirectionChange) == 0x000008, "Wrong alignment on BTS_GodBot_SetFocus_C_DetectRapidDirectionChange");
static_assert(sizeof(BTS_GodBot_SetFocus_C_DetectRapidDirectionChange) == 0x0000B8, "Wrong size on BTS_GodBot_SetFocus_C_DetectRapidDirectionChange");
static_assert(offsetof(BTS_GodBot_SetFocus_C_DetectRapidDirectionChange, InController) == 0x000000, "Member 'BTS_GodBot_SetFocus_C_DetectRapidDirectionChange::InController' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_DetectRapidDirectionChange, InPawn) == 0x000008, "Member 'BTS_GodBot_SetFocus_C_DetectRapidDirectionChange::InPawn' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_DetectRapidDirectionChange, CurrentMoveDirection) == 0x000010, "Member 'BTS_GodBot_SetFocus_C_DetectRapidDirectionChange::CurrentMoveDirection' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_DetectRapidDirectionChange, K2Node_CreateDelegate_OutputDelegate) == 0x000028, "Member 'BTS_GodBot_SetFocus_C_DetectRapidDirectionChange::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_DetectRapidDirectionChange, CallFunc_Not_PreBool_ReturnValue) == 0x000038, "Member 'BTS_GodBot_SetFocus_C_DetectRapidDirectionChange::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_DetectRapidDirectionChange, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000040, "Member 'BTS_GodBot_SetFocus_C_DetectRapidDirectionChange::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_DetectRapidDirectionChange, CallFunc_Dot_VectorVector_ReturnValue) == 0x000048, "Member 'BTS_GodBot_SetFocus_C_DetectRapidDirectionChange::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_DetectRapidDirectionChange, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000050, "Member 'BTS_GodBot_SetFocus_C_DetectRapidDirectionChange::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_DetectRapidDirectionChange, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000068, "Member 'BTS_GodBot_SetFocus_C_DetectRapidDirectionChange::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_DetectRapidDirectionChange, CallFunc_GetImmediateMoveDestination_ReturnValue) == 0x000070, "Member 'BTS_GodBot_SetFocus_C_DetectRapidDirectionChange::CallFunc_GetImmediateMoveDestination_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_DetectRapidDirectionChange, CallFunc_FindLookAtRotation_ReturnValue) == 0x000088, "Member 'BTS_GodBot_SetFocus_C_DetectRapidDirectionChange::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_DetectRapidDirectionChange, CallFunc_GetForwardVector_ReturnValue) == 0x0000A0, "Member 'BTS_GodBot_SetFocus_C_DetectRapidDirectionChange::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");

// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.DrawDebug
// 0x0048 (0x0048 - 0x0000)
struct BTS_GodBot_SetFocus_C_DrawDebug final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OwnerPawn;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         DrawDuration;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetFocalPoint_ReturnValue;                // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_GodBot_SetFocus_C_DrawDebug) == 0x000008, "Wrong alignment on BTS_GodBot_SetFocus_C_DrawDebug");
static_assert(sizeof(BTS_GodBot_SetFocus_C_DrawDebug) == 0x000048, "Wrong size on BTS_GodBot_SetFocus_C_DrawDebug");
static_assert(offsetof(BTS_GodBot_SetFocus_C_DrawDebug, OwnerController) == 0x000000, "Member 'BTS_GodBot_SetFocus_C_DrawDebug::OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_DrawDebug, OwnerPawn) == 0x000008, "Member 'BTS_GodBot_SetFocus_C_DrawDebug::OwnerPawn' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_DrawDebug, DrawDuration) == 0x000010, "Member 'BTS_GodBot_SetFocus_C_DrawDebug::DrawDuration' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_DrawDebug, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BTS_GodBot_SetFocus_C_DrawDebug::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_DrawDebug, CallFunc_GetFocalPoint_ReturnValue) == 0x000030, "Member 'BTS_GodBot_SetFocus_C_DrawDebug::CallFunc_GetFocalPoint_ReturnValue' has a wrong offset!");

// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.ExecuteUbergraph_BTS_GodBot_SetFocus
// 0x0090 (0x0090 - 0x0000)
struct BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetNewFocus_Success;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetFocusActor_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloat_ReturnValue;                  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          K2Node_Event_OwnerController_2;                    // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_2;                     // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      K2Node_DynamicCast_AsHWCharacter_Base;             // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController_1;                    // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_1;                     // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      K2Node_DynamicCast_AsHWCharacter_Base_1;           // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGodBotInhandRange_ReturnValue;         // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_CachedApproximateInhandRange_ImplicitCast; // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus) == 0x000008, "Wrong alignment on BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus");
static_assert(sizeof(BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus) == 0x000090, "Wrong size on BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus, EntryPoint) == 0x000000, "Member 'BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus, K2Node_Event_OwnerController) == 0x000008, "Member 'BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus, K2Node_Event_ControlledPawn) == 0x000010, "Member 'BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus, K2Node_Event_DeltaSeconds) == 0x000018, "Member 'BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus, CallFunc_SetNewFocus_Success) == 0x00001C, "Member 'BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus::CallFunc_SetNewFocus_Success' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus, CallFunc_Not_PreBool_ReturnValue) == 0x00001D, "Member 'BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus, CallFunc_GetFocusActor_ReturnValue) == 0x000020, "Member 'BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus::CallFunc_GetFocusActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus, CallFunc_RandomFloat_ReturnValue) == 0x000030, "Member 'BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus::CallFunc_RandomFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus, K2Node_Event_OwnerController_2) == 0x000038, "Member 'BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus::K2Node_Event_OwnerController_2' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus, K2Node_Event_ControlledPawn_2) == 0x000040, "Member 'BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus::K2Node_Event_ControlledPawn_2' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus, K2Node_DynamicCast_AsHWCharacter_Base) == 0x000048, "Member 'BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus::K2Node_DynamicCast_AsHWCharacter_Base' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000051, "Member 'BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus, K2Node_Event_OwnerController_1) == 0x000058, "Member 'BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus::K2Node_Event_OwnerController_1' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus, K2Node_Event_ControlledPawn_1) == 0x000060, "Member 'BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus::K2Node_Event_ControlledPawn_1' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus, K2Node_DynamicCast_AsHWCharacter_Base_1) == 0x000068, "Member 'BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus::K2Node_DynamicCast_AsHWCharacter_Base_1' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus, K2Node_DynamicCast_bSuccess_1) == 0x000070, "Member 'BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus, CallFunc_GetGodBotInhandRange_ReturnValue) == 0x000074, "Member 'BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus::CallFunc_GetGodBotInhandRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000078, "Member 'BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000080, "Member 'BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus, K2Node_VariableSet_CachedApproximateInhandRange_ImplicitCast) == 0x000088, "Member 'BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus::K2Node_VariableSet_CachedApproximateInhandRange_ImplicitCast' has a wrong offset!");

// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.IsActorStealthToMe
// 0x0050 (0x0050 - 0x0000)
struct BTS_GodBot_SetFocus_C_IsActorStealthToMe final
{
public:
	class APawn*                                  OwnedPawn;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 InActor;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStealthed;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWVisibilityComponent*                 VisComp;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      K2Node_DynamicCast_AsHWCharacter_Base;             // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IHWInterface_Visibility> CallFunc_GetVisibilityComponent_self_CastInput;  // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHWVisibilityComponent*                 CallFunc_GetVisibilityComponent_ReturnValue;       // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMeshStealthedForTarget_ReturnValue;     // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_GodBot_SetFocus_C_IsActorStealthToMe) == 0x000008, "Wrong alignment on BTS_GodBot_SetFocus_C_IsActorStealthToMe");
static_assert(sizeof(BTS_GodBot_SetFocus_C_IsActorStealthToMe) == 0x000050, "Wrong size on BTS_GodBot_SetFocus_C_IsActorStealthToMe");
static_assert(offsetof(BTS_GodBot_SetFocus_C_IsActorStealthToMe, OwnedPawn) == 0x000000, "Member 'BTS_GodBot_SetFocus_C_IsActorStealthToMe::OwnedPawn' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_IsActorStealthToMe, InActor) == 0x000008, "Member 'BTS_GodBot_SetFocus_C_IsActorStealthToMe::InActor' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_IsActorStealthToMe, IsStealthed) == 0x000010, "Member 'BTS_GodBot_SetFocus_C_IsActorStealthToMe::IsStealthed' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_IsActorStealthToMe, VisComp) == 0x000018, "Member 'BTS_GodBot_SetFocus_C_IsActorStealthToMe::VisComp' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_IsActorStealthToMe, K2Node_DynamicCast_AsHWCharacter_Base) == 0x000020, "Member 'BTS_GodBot_SetFocus_C_IsActorStealthToMe::K2Node_DynamicCast_AsHWCharacter_Base' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_IsActorStealthToMe, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BTS_GodBot_SetFocus_C_IsActorStealthToMe::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_IsActorStealthToMe, CallFunc_GetVisibilityComponent_self_CastInput) == 0x000030, "Member 'BTS_GodBot_SetFocus_C_IsActorStealthToMe::CallFunc_GetVisibilityComponent_self_CastInput' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_IsActorStealthToMe, CallFunc_GetVisibilityComponent_ReturnValue) == 0x000040, "Member 'BTS_GodBot_SetFocus_C_IsActorStealthToMe::CallFunc_GetVisibilityComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_IsActorStealthToMe, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BTS_GodBot_SetFocus_C_IsActorStealthToMe::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_IsActorStealthToMe, CallFunc_IsMeshStealthedForTarget_ReturnValue) == 0x000049, "Member 'BTS_GodBot_SetFocus_C_IsActorStealthToMe::CallFunc_IsMeshStealthedForTarget_ReturnValue' has a wrong offset!");

// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.OnAbilityPhaseChanged
// 0x0038 (0x0038 - 0x0000)
struct BTS_GodBot_SetFocus_C_OnAbilityPhaseChanged final
{
public:
	class UHWAbilitySystemComponent*              AbilitySystem;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAbilitySpecHandle             AbilityHandle;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AbilityTags;                                       // 0x0010(0x0020)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
	EAbilityFlowPhase                             PrevPhase;                                         // 0x0030(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAbilityFlowPhase                             NextPhase;                                         // 0x0031(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_GodBot_SetFocus_C_OnAbilityPhaseChanged) == 0x000008, "Wrong alignment on BTS_GodBot_SetFocus_C_OnAbilityPhaseChanged");
static_assert(sizeof(BTS_GodBot_SetFocus_C_OnAbilityPhaseChanged) == 0x000038, "Wrong size on BTS_GodBot_SetFocus_C_OnAbilityPhaseChanged");
static_assert(offsetof(BTS_GodBot_SetFocus_C_OnAbilityPhaseChanged, AbilitySystem) == 0x000000, "Member 'BTS_GodBot_SetFocus_C_OnAbilityPhaseChanged::AbilitySystem' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_OnAbilityPhaseChanged, AbilityHandle) == 0x000008, "Member 'BTS_GodBot_SetFocus_C_OnAbilityPhaseChanged::AbilityHandle' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_OnAbilityPhaseChanged, AbilityTags) == 0x000010, "Member 'BTS_GodBot_SetFocus_C_OnAbilityPhaseChanged::AbilityTags' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_OnAbilityPhaseChanged, PrevPhase) == 0x000030, "Member 'BTS_GodBot_SetFocus_C_OnAbilityPhaseChanged::PrevPhase' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_OnAbilityPhaseChanged, NextPhase) == 0x000031, "Member 'BTS_GodBot_SetFocus_C_OnAbilityPhaseChanged::NextPhase' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_OnAbilityPhaseChanged, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000032, "Member 'BTS_GodBot_SetFocus_C_OnAbilityPhaseChanged::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.ReceiveActivationAI
// 0x0010 (0x0010 - 0x0000)
struct BTS_GodBot_SetFocus_C_ReceiveActivationAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_GodBot_SetFocus_C_ReceiveActivationAI) == 0x000008, "Wrong alignment on BTS_GodBot_SetFocus_C_ReceiveActivationAI");
static_assert(sizeof(BTS_GodBot_SetFocus_C_ReceiveActivationAI) == 0x000010, "Wrong size on BTS_GodBot_SetFocus_C_ReceiveActivationAI");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ReceiveActivationAI, OwnerController) == 0x000000, "Member 'BTS_GodBot_SetFocus_C_ReceiveActivationAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ReceiveActivationAI, ControlledPawn) == 0x000008, "Member 'BTS_GodBot_SetFocus_C_ReceiveActivationAI::ControlledPawn' has a wrong offset!");

// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.ReceiveDeactivationAI
// 0x0010 (0x0010 - 0x0000)
struct BTS_GodBot_SetFocus_C_ReceiveDeactivationAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_GodBot_SetFocus_C_ReceiveDeactivationAI) == 0x000008, "Wrong alignment on BTS_GodBot_SetFocus_C_ReceiveDeactivationAI");
static_assert(sizeof(BTS_GodBot_SetFocus_C_ReceiveDeactivationAI) == 0x000010, "Wrong size on BTS_GodBot_SetFocus_C_ReceiveDeactivationAI");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ReceiveDeactivationAI, OwnerController) == 0x000000, "Member 'BTS_GodBot_SetFocus_C_ReceiveDeactivationAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ReceiveDeactivationAI, ControlledPawn) == 0x000008, "Member 'BTS_GodBot_SetFocus_C_ReceiveDeactivationAI::ControlledPawn' has a wrong offset!");

// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.ReceiveTickAI
// 0x0018 (0x0018 - 0x0000)
struct BTS_GodBot_SetFocus_C_ReceiveTickAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_GodBot_SetFocus_C_ReceiveTickAI) == 0x000008, "Wrong alignment on BTS_GodBot_SetFocus_C_ReceiveTickAI");
static_assert(sizeof(BTS_GodBot_SetFocus_C_ReceiveTickAI) == 0x000018, "Wrong size on BTS_GodBot_SetFocus_C_ReceiveTickAI");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ReceiveTickAI, OwnerController) == 0x000000, "Member 'BTS_GodBot_SetFocus_C_ReceiveTickAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ReceiveTickAI, ControlledPawn) == 0x000008, "Member 'BTS_GodBot_SetFocus_C_ReceiveTickAI::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_ReceiveTickAI, DeltaSeconds) == 0x000010, "Member 'BTS_GodBot_SetFocus_C_ReceiveTickAI::DeltaSeconds' has a wrong offset!");

// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.SetNewFocus
// 0x0018 (0x0018 - 0x0000)
struct BTS_GodBot_SetFocus_C_SetNewFocus final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryFocusTowardEnemy_Success;              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryFocusOnAllyGod_Success;                // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryFocusForwardMovement_Success;          // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryFocusCurrentTarget_Success;            // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_GodBot_SetFocus_C_SetNewFocus) == 0x000008, "Wrong alignment on BTS_GodBot_SetFocus_C_SetNewFocus");
static_assert(sizeof(BTS_GodBot_SetFocus_C_SetNewFocus) == 0x000018, "Wrong size on BTS_GodBot_SetFocus_C_SetNewFocus");
static_assert(offsetof(BTS_GodBot_SetFocus_C_SetNewFocus, OwnerController) == 0x000000, "Member 'BTS_GodBot_SetFocus_C_SetNewFocus::OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_SetNewFocus, ControlledPawn) == 0x000008, "Member 'BTS_GodBot_SetFocus_C_SetNewFocus::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_SetNewFocus, Success) == 0x000010, "Member 'BTS_GodBot_SetFocus_C_SetNewFocus::Success' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_SetNewFocus, CallFunc_TryFocusTowardEnemy_Success) == 0x000011, "Member 'BTS_GodBot_SetFocus_C_SetNewFocus::CallFunc_TryFocusTowardEnemy_Success' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_SetNewFocus, CallFunc_Not_PreBool_ReturnValue) == 0x000012, "Member 'BTS_GodBot_SetFocus_C_SetNewFocus::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_SetNewFocus, CallFunc_TryFocusOnAllyGod_Success) == 0x000013, "Member 'BTS_GodBot_SetFocus_C_SetNewFocus::CallFunc_TryFocusOnAllyGod_Success' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_SetNewFocus, CallFunc_Not_PreBool_ReturnValue_1) == 0x000014, "Member 'BTS_GodBot_SetFocus_C_SetNewFocus::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_SetNewFocus, CallFunc_TryFocusForwardMovement_Success) == 0x000015, "Member 'BTS_GodBot_SetFocus_C_SetNewFocus::CallFunc_TryFocusForwardMovement_Success' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_SetNewFocus, CallFunc_TryFocusCurrentTarget_Success) == 0x000016, "Member 'BTS_GodBot_SetFocus_C_SetNewFocus::CallFunc_TryFocusCurrentTarget_Success' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_SetNewFocus, CallFunc_Not_PreBool_ReturnValue_2) == 0x000017, "Member 'BTS_GodBot_SetFocus_C_SetNewFocus::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");

// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.TryFocusCurrentTarget
// 0x0060 (0x0060 - 0x0000)
struct BTS_GodBot_SetFocus_C_TryFocusCurrentTarget final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWAIController*                        K2Node_DynamicCast_AsHWAIController;               // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCurrentThreatLastKnownLocation_ReturnValue; // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloat_ReturnValue;                  // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetBlackboardValueAsActor_ReturnValue;    // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanFocusCurrentTarget_CanTarget;          // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActorStealthToMe_IsStealthed;           // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_GodBot_SetFocus_C_TryFocusCurrentTarget) == 0x000008, "Wrong alignment on BTS_GodBot_SetFocus_C_TryFocusCurrentTarget");
static_assert(sizeof(BTS_GodBot_SetFocus_C_TryFocusCurrentTarget) == 0x000060, "Wrong size on BTS_GodBot_SetFocus_C_TryFocusCurrentTarget");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusCurrentTarget, OwnerController) == 0x000000, "Member 'BTS_GodBot_SetFocus_C_TryFocusCurrentTarget::OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusCurrentTarget, ControlledPawn) == 0x000008, "Member 'BTS_GodBot_SetFocus_C_TryFocusCurrentTarget::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusCurrentTarget, Success) == 0x000010, "Member 'BTS_GodBot_SetFocus_C_TryFocusCurrentTarget::Success' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusCurrentTarget, K2Node_DynamicCast_AsHWAIController) == 0x000018, "Member 'BTS_GodBot_SetFocus_C_TryFocusCurrentTarget::K2Node_DynamicCast_AsHWAIController' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusCurrentTarget, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BTS_GodBot_SetFocus_C_TryFocusCurrentTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusCurrentTarget, CallFunc_GetCurrentThreatLastKnownLocation_ReturnValue) == 0x000028, "Member 'BTS_GodBot_SetFocus_C_TryFocusCurrentTarget::CallFunc_GetCurrentThreatLastKnownLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusCurrentTarget, CallFunc_RandomFloat_ReturnValue) == 0x000040, "Member 'BTS_GodBot_SetFocus_C_TryFocusCurrentTarget::CallFunc_RandomFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusCurrentTarget, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000048, "Member 'BTS_GodBot_SetFocus_C_TryFocusCurrentTarget::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusCurrentTarget, CallFunc_GetBlackboardValueAsActor_ReturnValue) == 0x000050, "Member 'BTS_GodBot_SetFocus_C_TryFocusCurrentTarget::CallFunc_GetBlackboardValueAsActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusCurrentTarget, CallFunc_CanFocusCurrentTarget_CanTarget) == 0x000058, "Member 'BTS_GodBot_SetFocus_C_TryFocusCurrentTarget::CallFunc_CanFocusCurrentTarget_CanTarget' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusCurrentTarget, CallFunc_IsActorStealthToMe_IsStealthed) == 0x000059, "Member 'BTS_GodBot_SetFocus_C_TryFocusCurrentTarget::CallFunc_IsActorStealthToMe_IsStealthed' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusCurrentTarget, CallFunc_Not_PreBool_ReturnValue) == 0x00005A, "Member 'BTS_GodBot_SetFocus_C_TryFocusCurrentTarget::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusCurrentTarget, CallFunc_IsValid_ReturnValue) == 0x00005B, "Member 'BTS_GodBot_SetFocus_C_TryFocusCurrentTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.TryFocusEnemyTower
// 0x0020 (0x0020 - 0x0000)
struct BTS_GodBot_SetFocus_C_TryFocusEnemyTower final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetBlackboardValueAsActor_ReturnValue;    // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_GodBot_SetFocus_C_TryFocusEnemyTower) == 0x000008, "Wrong alignment on BTS_GodBot_SetFocus_C_TryFocusEnemyTower");
static_assert(sizeof(BTS_GodBot_SetFocus_C_TryFocusEnemyTower) == 0x000020, "Wrong size on BTS_GodBot_SetFocus_C_TryFocusEnemyTower");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusEnemyTower, OwnerController) == 0x000000, "Member 'BTS_GodBot_SetFocus_C_TryFocusEnemyTower::OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusEnemyTower, Success) == 0x000008, "Member 'BTS_GodBot_SetFocus_C_TryFocusEnemyTower::Success' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusEnemyTower, CallFunc_GetBlackboardValueAsActor_ReturnValue) == 0x000010, "Member 'BTS_GodBot_SetFocus_C_TryFocusEnemyTower::CallFunc_GetBlackboardValueAsActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusEnemyTower, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BTS_GodBot_SetFocus_C_TryFocusEnemyTower::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.TryFocusForwardMovement
// 0x00B8 (0x00B8 - 0x0000)
struct BTS_GodBot_SetFocus_C_TryFocusForwardMovement final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSizeXYSquared_ReturnValue;               // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue;              // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_GodBot_SetFocus_C_TryFocusForwardMovement) == 0x000008, "Wrong alignment on BTS_GodBot_SetFocus_C_TryFocusForwardMovement");
static_assert(sizeof(BTS_GodBot_SetFocus_C_TryFocusForwardMovement) == 0x0000B8, "Wrong size on BTS_GodBot_SetFocus_C_TryFocusForwardMovement");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusForwardMovement, OwnerController) == 0x000000, "Member 'BTS_GodBot_SetFocus_C_TryFocusForwardMovement::OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusForwardMovement, ControlledPawn) == 0x000008, "Member 'BTS_GodBot_SetFocus_C_TryFocusForwardMovement::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusForwardMovement, Success) == 0x000010, "Member 'BTS_GodBot_SetFocus_C_TryFocusForwardMovement::Success' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusForwardMovement, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000018, "Member 'BTS_GodBot_SetFocus_C_TryFocusForwardMovement::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusForwardMovement, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'BTS_GodBot_SetFocus_C_TryFocusForwardMovement::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusForwardMovement, CallFunc_GetVelocity_ReturnValue) == 0x000048, "Member 'BTS_GodBot_SetFocus_C_TryFocusForwardMovement::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusForwardMovement, CallFunc_VSizeXYSquared_ReturnValue) == 0x000060, "Member 'BTS_GodBot_SetFocus_C_TryFocusForwardMovement::CallFunc_VSizeXYSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusForwardMovement, CallFunc_Vector_Normal2D_ReturnValue) == 0x000068, "Member 'BTS_GodBot_SetFocus_C_TryFocusForwardMovement::CallFunc_Vector_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusForwardMovement, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000080, "Member 'BTS_GodBot_SetFocus_C_TryFocusForwardMovement::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusForwardMovement, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000088, "Member 'BTS_GodBot_SetFocus_C_TryFocusForwardMovement::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusForwardMovement, CallFunc_Add_VectorVector_ReturnValue) == 0x0000A0, "Member 'BTS_GodBot_SetFocus_C_TryFocusForwardMovement::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.TryFocusOnAllyGod
// 0x02D8 (0x02D8 - 0x0000)
struct BTS_GodBot_SetFocus_C_TryFocusOnAllyGod final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AHWCharacter_Smite_God*>         CachedNearbyTeammates;                             // 0x0018(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	EDrawDebugTrace                               Temp_byte_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               Temp_byte_Variable_1;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloat_ReturnValue;                  // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Square_ReturnValue;                       // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_ReturnValue;                         // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                CallFunc_GetActorGameTeam_ReturnValue;             // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               K2Node_Select_Default;                             // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0088(0x0010)(ConstParm, ReferenceParm)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x0098(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FHitResult>                     CallFunc_SphereTraceMultiForObjects_OutHits;       // 0x00A8(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceMultiForObjects_ReturnValue;   // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_Array_Get_Item;                           // 0x00C0(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AA[0x2];                                      // 0x01AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0200(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0218(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0220(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0228(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0250(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0268(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_284[0x4];                                      // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWCharacter_Smite_God*                 K2Node_DynamicCast_AsHWCharacter_Smite_God;        // 0x0288(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0298(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance2DSquared_ReturnValue;     // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                CallFunc_GetActorGameTeam_ReturnValue_1;           // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x02C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CA[0x2];                                      // 0x02CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x3];                                      // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SphereTraceMultiForObjects_Radius_ImplicitCast; // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod) == 0x000008, "Wrong alignment on BTS_GodBot_SetFocus_C_TryFocusOnAllyGod");
static_assert(sizeof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod) == 0x0002D8, "Wrong size on BTS_GodBot_SetFocus_C_TryFocusOnAllyGod");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, OwnerController) == 0x000000, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, ControlledPawn) == 0x000008, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, Success) == 0x000010, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::Success' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CachedNearbyTeammates) == 0x000018, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CachedNearbyTeammates' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, Temp_byte_Variable) == 0x000028, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, Temp_byte_Variable_1) == 0x000048, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, Temp_bool_Variable) == 0x000049, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, Temp_int_Array_Index_Variable) == 0x00004C, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000050, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_RandomFloat_ReturnValue) == 0x000068, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_RandomFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_Square_ReturnValue) == 0x000070, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_Square_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_FMax_ReturnValue) == 0x000078, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_GetActorGameTeam_ReturnValue) == 0x000080, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_GetActorGameTeam_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, K2Node_Select_Default) == 0x000081, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, K2Node_MakeArray_Array) == 0x000088, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, K2Node_MakeArray_Array_1) == 0x000098, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_SphereTraceMultiForObjects_OutHits) == 0x0000A8, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_SphereTraceMultiForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_SphereTraceMultiForObjects_ReturnValue) == 0x0000B8, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_SphereTraceMultiForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, Temp_int_Loop_Counter_Variable) == 0x0000BC, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_Array_Get_Item) == 0x0000C0, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_BreakHitResult_bBlockingHit) == 0x0001A8, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001A9, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_BreakHitResult_Time) == 0x0001AC, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_BreakHitResult_Distance) == 0x0001B0, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_BreakHitResult_Location) == 0x0001B8, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_BreakHitResult_ImpactPoint) == 0x0001D0, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_BreakHitResult_Normal) == 0x0001E8, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_BreakHitResult_ImpactNormal) == 0x000200, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_BreakHitResult_PhysMat) == 0x000218, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_BreakHitResult_HitActor) == 0x000220, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_BreakHitResult_HitComponent) == 0x000228, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_BreakHitResult_HitBoneName) == 0x000230, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_BreakHitResult_BoneName) == 0x000238, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_BreakHitResult_HitItem) == 0x000240, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_BreakHitResult_ElementIndex) == 0x000244, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_BreakHitResult_FaceIndex) == 0x000248, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_BreakHitResult_TraceStart) == 0x000250, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_BreakHitResult_TraceEnd) == 0x000268, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_Add_IntInt_ReturnValue) == 0x000280, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, K2Node_DynamicCast_AsHWCharacter_Smite_God) == 0x000288, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::K2Node_DynamicCast_AsHWCharacter_Smite_God' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, K2Node_DynamicCast_bSuccess) == 0x000290, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000298, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_Vector_Distance2DSquared_ReturnValue) == 0x0002B0, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_Vector_Distance2DSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_GetActorGameTeam_ReturnValue_1) == 0x0002B8, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_GetActorGameTeam_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0002C0, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0002C8, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0002C9, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_Array_Length_ReturnValue) == 0x0002CC, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_Less_IntInt_ReturnValue) == 0x0002D0, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusOnAllyGod, CallFunc_SphereTraceMultiForObjects_Radius_ImplicitCast) == 0x0002D4, "Member 'BTS_GodBot_SetFocus_C_TryFocusOnAllyGod::CallFunc_SphereTraceMultiForObjects_Radius_ImplicitCast' has a wrong offset!");

// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.TryFocusTowardEnemy
// 0x0018 (0x0018 - 0x0000)
struct BTS_GodBot_SetFocus_C_TryFocusTowardEnemy final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_GodBot_SetFocus_C_TryFocusTowardEnemy) == 0x000008, "Wrong alignment on BTS_GodBot_SetFocus_C_TryFocusTowardEnemy");
static_assert(sizeof(BTS_GodBot_SetFocus_C_TryFocusTowardEnemy) == 0x000018, "Wrong size on BTS_GodBot_SetFocus_C_TryFocusTowardEnemy");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusTowardEnemy, OwnerController) == 0x000000, "Member 'BTS_GodBot_SetFocus_C_TryFocusTowardEnemy::OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusTowardEnemy, ControlledPawn) == 0x000008, "Member 'BTS_GodBot_SetFocus_C_TryFocusTowardEnemy::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetFocus_C_TryFocusTowardEnemy, Success) == 0x000010, "Member 'BTS_GodBot_SetFocus_C_TryFocusTowardEnemy::Success' has a wrong offset!");

}

