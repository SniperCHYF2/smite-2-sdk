#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NPE_Waypoint_Objective

#include "Basic.hpp"

#include "E_NPE_ObjectiveEvents_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function BP_NPE_Waypoint_Objective.BP_NPE_Waypoint_Objective_C.ExecuteUbergraph_BP_NPE_Waypoint_Objective
// 0x0068 (0x0068 - 0x0000)
struct BP_NPE_Waypoint_Objective_C_ExecuteUbergraph_BP_NPE_Waypoint_Objective final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ObjectiveComponent_C*               CallFunc_GetComponentByClass_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_NPE_EventListener_C*                CallFunc_GetComponentByClass_ReturnValue_1;        // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(E_NPE_ObjectiveEvents EventType)> K2Node_CreateDelegate_OutputDelegate;           // 0x0018(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FGameplayTag& CurrentPhase, double PhaseDuration)> K2Node_CreateDelegate_OutputDelegate_1; // 0x0028(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Objective_C>      K2Node_DynamicCast_AsBPI_Objective;                // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetCurrentObjectivePhaseRemainingTime_RemainingTime; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_GetCurrentPhase_CurrentPhase;             // 0x005C(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NPE_Waypoint_Objective_C_ExecuteUbergraph_BP_NPE_Waypoint_Objective) == 0x000008, "Wrong alignment on BP_NPE_Waypoint_Objective_C_ExecuteUbergraph_BP_NPE_Waypoint_Objective");
static_assert(sizeof(BP_NPE_Waypoint_Objective_C_ExecuteUbergraph_BP_NPE_Waypoint_Objective) == 0x000068, "Wrong size on BP_NPE_Waypoint_Objective_C_ExecuteUbergraph_BP_NPE_Waypoint_Objective");
static_assert(offsetof(BP_NPE_Waypoint_Objective_C_ExecuteUbergraph_BP_NPE_Waypoint_Objective, EntryPoint) == 0x000000, "Member 'BP_NPE_Waypoint_Objective_C_ExecuteUbergraph_BP_NPE_Waypoint_Objective::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_NPE_Waypoint_Objective_C_ExecuteUbergraph_BP_NPE_Waypoint_Objective, CallFunc_GetComponentByClass_ReturnValue) == 0x000008, "Member 'BP_NPE_Waypoint_Objective_C_ExecuteUbergraph_BP_NPE_Waypoint_Objective::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NPE_Waypoint_Objective_C_ExecuteUbergraph_BP_NPE_Waypoint_Objective, CallFunc_GetComponentByClass_ReturnValue_1) == 0x000010, "Member 'BP_NPE_Waypoint_Objective_C_ExecuteUbergraph_BP_NPE_Waypoint_Objective::CallFunc_GetComponentByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NPE_Waypoint_Objective_C_ExecuteUbergraph_BP_NPE_Waypoint_Objective, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'BP_NPE_Waypoint_Objective_C_ExecuteUbergraph_BP_NPE_Waypoint_Objective::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_NPE_Waypoint_Objective_C_ExecuteUbergraph_BP_NPE_Waypoint_Objective, K2Node_CreateDelegate_OutputDelegate_1) == 0x000028, "Member 'BP_NPE_Waypoint_Objective_C_ExecuteUbergraph_BP_NPE_Waypoint_Objective::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_NPE_Waypoint_Objective_C_ExecuteUbergraph_BP_NPE_Waypoint_Objective, K2Node_DynamicCast_AsBPI_Objective) == 0x000038, "Member 'BP_NPE_Waypoint_Objective_C_ExecuteUbergraph_BP_NPE_Waypoint_Objective::K2Node_DynamicCast_AsBPI_Objective' has a wrong offset!");
static_assert(offsetof(BP_NPE_Waypoint_Objective_C_ExecuteUbergraph_BP_NPE_Waypoint_Objective, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_NPE_Waypoint_Objective_C_ExecuteUbergraph_BP_NPE_Waypoint_Objective::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_NPE_Waypoint_Objective_C_ExecuteUbergraph_BP_NPE_Waypoint_Objective, CallFunc_GetCurrentObjectivePhaseRemainingTime_RemainingTime) == 0x000050, "Member 'BP_NPE_Waypoint_Objective_C_ExecuteUbergraph_BP_NPE_Waypoint_Objective::CallFunc_GetCurrentObjectivePhaseRemainingTime_RemainingTime' has a wrong offset!");
static_assert(offsetof(BP_NPE_Waypoint_Objective_C_ExecuteUbergraph_BP_NPE_Waypoint_Objective, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'BP_NPE_Waypoint_Objective_C_ExecuteUbergraph_BP_NPE_Waypoint_Objective::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NPE_Waypoint_Objective_C_ExecuteUbergraph_BP_NPE_Waypoint_Objective, CallFunc_GetCurrentPhase_CurrentPhase) == 0x00005C, "Member 'BP_NPE_Waypoint_Objective_C_ExecuteUbergraph_BP_NPE_Waypoint_Objective::CallFunc_GetCurrentPhase_CurrentPhase' has a wrong offset!");
static_assert(offsetof(BP_NPE_Waypoint_Objective_C_ExecuteUbergraph_BP_NPE_Waypoint_Objective, CallFunc_IsValid_ReturnValue_1) == 0x000064, "Member 'BP_NPE_Waypoint_Objective_C_ExecuteUbergraph_BP_NPE_Waypoint_Objective::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_NPE_Waypoint_Objective.BP_NPE_Waypoint_Objective_C.OnObjectiveEvent
// 0x0002 (0x0002 - 0x0000)
struct BP_NPE_Waypoint_Objective_C_OnObjectiveEvent final
{
public:
	E_NPE_ObjectiveEvents                         EventType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NPE_Waypoint_Objective_C_OnObjectiveEvent) == 0x000001, "Wrong alignment on BP_NPE_Waypoint_Objective_C_OnObjectiveEvent");
static_assert(sizeof(BP_NPE_Waypoint_Objective_C_OnObjectiveEvent) == 0x000002, "Wrong size on BP_NPE_Waypoint_Objective_C_OnObjectiveEvent");
static_assert(offsetof(BP_NPE_Waypoint_Objective_C_OnObjectiveEvent, EventType) == 0x000000, "Member 'BP_NPE_Waypoint_Objective_C_OnObjectiveEvent::EventType' has a wrong offset!");
static_assert(offsetof(BP_NPE_Waypoint_Objective_C_OnObjectiveEvent, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'BP_NPE_Waypoint_Objective_C_OnObjectiveEvent::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_NPE_Waypoint_Objective.BP_NPE_Waypoint_Objective_C.OnObjectivePhaseEventStart
// 0x0018 (0x0018 - 0x0000)
struct BP_NPE_Waypoint_Objective_C_OnObjectivePhaseEventStart final
{
public:
	struct FGameplayTag                           CurrentPhase;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	double                                        PhaseDuration;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess;   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NPE_Waypoint_Objective_C_OnObjectivePhaseEventStart) == 0x000008, "Wrong alignment on BP_NPE_Waypoint_Objective_C_OnObjectivePhaseEventStart");
static_assert(sizeof(BP_NPE_Waypoint_Objective_C_OnObjectivePhaseEventStart) == 0x000018, "Wrong size on BP_NPE_Waypoint_Objective_C_OnObjectivePhaseEventStart");
static_assert(offsetof(BP_NPE_Waypoint_Objective_C_OnObjectivePhaseEventStart, CurrentPhase) == 0x000000, "Member 'BP_NPE_Waypoint_Objective_C_OnObjectivePhaseEventStart::CurrentPhase' has a wrong offset!");
static_assert(offsetof(BP_NPE_Waypoint_Objective_C_OnObjectivePhaseEventStart, PhaseDuration) == 0x000008, "Member 'BP_NPE_Waypoint_Objective_C_OnObjectivePhaseEventStart::PhaseDuration' has a wrong offset!");
static_assert(offsetof(BP_NPE_Waypoint_Objective_C_OnObjectivePhaseEventStart, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess) == 0x000010, "Member 'BP_NPE_Waypoint_Objective_C_OnObjectivePhaseEventStart::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess' has a wrong offset!");

}

