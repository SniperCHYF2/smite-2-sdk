#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Items_HydrasLament

#include "Basic.hpp"

#include "GA_Items_HydrasLament_classes.hpp"
#include "GA_Items_HydrasLament_parameters.hpp"


namespace SDK
{

// Function GA_Items_HydrasLament.GA_Items_HydrasLament_C.AdjustDamageDone
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTagContainer&     EffectTags                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FDamageCalcInfo&           DamageCalcInfo                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// class UHWAbilitySystemComponent*        BroadcastingAbilitySystemComponent                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// const EHWAdjustAttributeEventType       AdjustAttributeEventType                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const float                             BaseDamageValue                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_Items_HydrasLament_C::AdjustDamageDone(const struct FGameplayTagContainer& EffectTags, const struct FDamageCalcInfo& DamageCalcInfo, class UHWAbilitySystemComponent* BroadcastingAbilitySystemComponent, const EHWAdjustAttributeEventType AdjustAttributeEventType, const float BaseDamageValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Items_HydrasLament_C", "AdjustDamageDone");

	Params::GA_Items_HydrasLament_C_AdjustDamageDone Parms{};

	Parms.EffectTags = std::move(EffectTags);
	Parms.DamageCalcInfo = std::move(DamageCalcInfo);
	Parms.BroadcastingAbilitySystemComponent = BroadcastingAbilitySystemComponent;
	Parms.AdjustAttributeEventType = AdjustAttributeEventType;
	Parms.BaseDamageValue = BaseDamageValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_Items_HydrasLament.GA_Items_HydrasLament_C.ExecuteUbergraph_GA_Items_HydrasLament
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_Items_HydrasLament_C::ExecuteUbergraph_GA_Items_HydrasLament(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Items_HydrasLament_C", "ExecuteUbergraph_GA_Items_HydrasLament");

	Params::GA_Items_HydrasLament_C_ExecuteUbergraph_GA_Items_HydrasLament Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_Items_HydrasLament.GA_Items_HydrasLament_C.Is Ability Swap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UHWGameplayAbility_Enhanced*      Ability                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsAbilitySwap                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_Items_HydrasLament_C::Is_Ability_Swap(class UHWGameplayAbility_Enhanced* Ability, bool* IsAbilitySwap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Items_HydrasLament_C", "Is Ability Swap");

	Params::GA_Items_HydrasLament_C_Is_Ability_Swap Parms{};

	Parms.Ability = Ability;

	UObject::ProcessEvent(Func, &Parms);

	if (IsAbilitySwap != nullptr)
		*IsAbilitySwap = Parms.IsAbilitySwap;
}


// Function GA_Items_HydrasLament.GA_Items_HydrasLament_C.IsAbilityRefire
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UHWGameplayAbility_Enhanced*      Ability                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsRefire                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_Items_HydrasLament_C::IsAbilityRefire(class UHWGameplayAbility_Enhanced* Ability, bool* IsRefire)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Items_HydrasLament_C", "IsAbilityRefire");

	Params::GA_Items_HydrasLament_C_IsAbilityRefire Parms{};

	Parms.Ability = Ability;

	UObject::ProcessEvent(Func, &Parms);

	if (IsRefire != nullptr)
		*IsRefire = Parms.IsRefire;
}


// Function GA_Items_HydrasLament.GA_Items_HydrasLament_C.OnAbilityStartFire
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayAbilitySpecHandle&AbilityHandle                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTagContainer&     AbilityTags_0                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
// const struct FHWAbilityFiringInstanceId&FiringInstanceId                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UGA_Items_HydrasLament_C::OnAbilityStartFire(const struct FGameplayAbilitySpecHandle& AbilityHandle, const struct FGameplayTagContainer& AbilityTags_0, const struct FHWAbilityFiringInstanceId& FiringInstanceId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Items_HydrasLament_C", "OnAbilityStartFire");

	Params::GA_Items_HydrasLament_C_OnAbilityStartFire Parms{};

	Parms.AbilityHandle = std::move(AbilityHandle);
	Parms.AbilityTags_0 = std::move(AbilityTags_0);
	Parms.FiringInstanceId = std::move(FiringInstanceId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_Items_HydrasLament.GA_Items_HydrasLament_C.SetupListeners
// (Event, Protected, BlueprintEvent)

void UGA_Items_HydrasLament_C::SetupListeners()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Items_HydrasLament_C", "SetupListeners");

	UObject::ProcessEvent(Func, nullptr);
}

}

