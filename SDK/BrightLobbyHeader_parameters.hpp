#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BrightLobbyHeader

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function BrightLobbyHeader.BrightLobbyHeader_C.ExecuteUbergraph_BrightLobbyHeader
// 0x0070 (0x0070 - 0x0000)
struct BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_FromRoute;                            // 0x0014(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_ToRoute;                              // 0x001C(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URHInputManager*                        CallFunc_GetInputManager_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_BrightLobbyHUD_C*                   K2Node_DynamicCast_AsBP_Bright_Lobby_HUD;          // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           K2Node_MakeArray_Array;                            // 0x0040(0x0010)(ReferenceParm)
	bool                                          CallFunc_Add_View_Route_ViewChanged;               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_FromRoute_1;                          // 0x0054(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_ToRoute_1;                            // 0x005C(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URHInputManager*                        CallFunc_GetInputManager_ReturnValue_1;            // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader) == 0x000008, "Wrong alignment on BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader");
static_assert(sizeof(BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader) == 0x000070, "Wrong size on BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader");
static_assert(offsetof(BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader, EntryPoint) == 0x000000, "Member 'BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader::EntryPoint' has a wrong offset!");
static_assert(offsetof(BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader, K2Node_Event_FromRoute) == 0x000014, "Member 'BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader::K2Node_Event_FromRoute' has a wrong offset!");
static_assert(offsetof(BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader, K2Node_Event_ToRoute) == 0x00001C, "Member 'BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader::K2Node_Event_ToRoute' has a wrong offset!");
static_assert(offsetof(BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader, CallFunc_GetInputManager_ReturnValue) == 0x000028, "Member 'BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader::CallFunc_GetInputManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader, K2Node_DynamicCast_AsBP_Bright_Lobby_HUD) == 0x000030, "Member 'BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader::K2Node_DynamicCast_AsBP_Bright_Lobby_HUD' has a wrong offset!");
static_assert(offsetof(BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader, K2Node_MakeArray_Array) == 0x000040, "Member 'BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader, CallFunc_Add_View_Route_ViewChanged) == 0x000050, "Member 'BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader::CallFunc_Add_View_Route_ViewChanged' has a wrong offset!");
static_assert(offsetof(BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader, K2Node_Event_FromRoute_1) == 0x000054, "Member 'BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader::K2Node_Event_FromRoute_1' has a wrong offset!");
static_assert(offsetof(BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader, K2Node_Event_ToRoute_1) == 0x00005C, "Member 'BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader::K2Node_Event_ToRoute_1' has a wrong offset!");
static_assert(offsetof(BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader, CallFunc_GetInputManager_ReturnValue_1) == 0x000068, "Member 'BrightLobbyHeader_C_ExecuteUbergraph_BrightLobbyHeader::CallFunc_GetInputManager_ReturnValue_1' has a wrong offset!");

// Function BrightLobbyHeader.BrightLobbyHeader_C.StartHideSequence
// 0x0010 (0x0010 - 0x0000)
struct BrightLobbyHeader_C_StartHideSequence final
{
public:
	struct FGameplayTag                           FromRoute;                                         // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ToRoute;                                           // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BrightLobbyHeader_C_StartHideSequence) == 0x000004, "Wrong alignment on BrightLobbyHeader_C_StartHideSequence");
static_assert(sizeof(BrightLobbyHeader_C_StartHideSequence) == 0x000010, "Wrong size on BrightLobbyHeader_C_StartHideSequence");
static_assert(offsetof(BrightLobbyHeader_C_StartHideSequence, FromRoute) == 0x000000, "Member 'BrightLobbyHeader_C_StartHideSequence::FromRoute' has a wrong offset!");
static_assert(offsetof(BrightLobbyHeader_C_StartHideSequence, ToRoute) == 0x000008, "Member 'BrightLobbyHeader_C_StartHideSequence::ToRoute' has a wrong offset!");

// Function BrightLobbyHeader.BrightLobbyHeader_C.StartShowSequence
// 0x0010 (0x0010 - 0x0000)
struct BrightLobbyHeader_C_StartShowSequence final
{
public:
	struct FGameplayTag                           FromRoute;                                         // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ToRoute;                                           // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BrightLobbyHeader_C_StartShowSequence) == 0x000004, "Wrong alignment on BrightLobbyHeader_C_StartShowSequence");
static_assert(sizeof(BrightLobbyHeader_C_StartShowSequence) == 0x000010, "Wrong size on BrightLobbyHeader_C_StartShowSequence");
static_assert(offsetof(BrightLobbyHeader_C_StartShowSequence, FromRoute) == 0x000000, "Member 'BrightLobbyHeader_C_StartShowSequence::FromRoute' has a wrong offset!");
static_assert(offsetof(BrightLobbyHeader_C_StartShowSequence, ToRoute) == 0x000008, "Member 'BrightLobbyHeader_C_StartShowSequence::ToRoute' has a wrong offset!");

}

