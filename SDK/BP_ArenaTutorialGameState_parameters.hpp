#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ArenaTutorialGameState

#include "Basic.hpp"

#include "Hemingway_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function BP_ArenaTutorialGameState.BP_ArenaTutorialGameState_C.ExecuteUbergraph_BP_ArenaTutorialGameState
// 0x0040 (0x0040 - 0x0000)
struct BP_ArenaTutorialGameState_C_ExecuteUbergraph_BP_ArenaTutorialGameState final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_ActiveStage;                          // 0x0004(0x0008)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_NPE_Stage_C*>                CallFunc_GetAllActorsOfClass_OutActors;            // 0x0010(0x0010)(ReferenceParm)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_NPE_Guide_C*                        CallFunc_GetActorOfClass_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_NewAIDirective;                       // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_ClearPreviousDirectives;              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTag_ReturnValue;                       // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ArenaTutorialGameState_C_ExecuteUbergraph_BP_ArenaTutorialGameState) == 0x000008, "Wrong alignment on BP_ArenaTutorialGameState_C_ExecuteUbergraph_BP_ArenaTutorialGameState");
static_assert(sizeof(BP_ArenaTutorialGameState_C_ExecuteUbergraph_BP_ArenaTutorialGameState) == 0x000040, "Wrong size on BP_ArenaTutorialGameState_C_ExecuteUbergraph_BP_ArenaTutorialGameState");
static_assert(offsetof(BP_ArenaTutorialGameState_C_ExecuteUbergraph_BP_ArenaTutorialGameState, EntryPoint) == 0x000000, "Member 'BP_ArenaTutorialGameState_C_ExecuteUbergraph_BP_ArenaTutorialGameState::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_ArenaTutorialGameState_C_ExecuteUbergraph_BP_ArenaTutorialGameState, K2Node_Event_ActiveStage) == 0x000004, "Member 'BP_ArenaTutorialGameState_C_ExecuteUbergraph_BP_ArenaTutorialGameState::K2Node_Event_ActiveStage' has a wrong offset!");
static_assert(offsetof(BP_ArenaTutorialGameState_C_ExecuteUbergraph_BP_ArenaTutorialGameState, CallFunc_GetAllActorsOfClass_OutActors) == 0x000010, "Member 'BP_ArenaTutorialGameState_C_ExecuteUbergraph_BP_ArenaTutorialGameState::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_ArenaTutorialGameState_C_ExecuteUbergraph_BP_ArenaTutorialGameState, CallFunc_HasAuthority_ReturnValue) == 0x000020, "Member 'BP_ArenaTutorialGameState_C_ExecuteUbergraph_BP_ArenaTutorialGameState::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ArenaTutorialGameState_C_ExecuteUbergraph_BP_ArenaTutorialGameState, CallFunc_GetActorOfClass_ReturnValue) == 0x000028, "Member 'BP_ArenaTutorialGameState_C_ExecuteUbergraph_BP_ArenaTutorialGameState::CallFunc_GetActorOfClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ArenaTutorialGameState_C_ExecuteUbergraph_BP_ArenaTutorialGameState, K2Node_Event_NewAIDirective) == 0x000030, "Member 'BP_ArenaTutorialGameState_C_ExecuteUbergraph_BP_ArenaTutorialGameState::K2Node_Event_NewAIDirective' has a wrong offset!");
static_assert(offsetof(BP_ArenaTutorialGameState_C_ExecuteUbergraph_BP_ArenaTutorialGameState, K2Node_Event_ClearPreviousDirectives) == 0x000038, "Member 'BP_ArenaTutorialGameState_C_ExecuteUbergraph_BP_ArenaTutorialGameState::K2Node_Event_ClearPreviousDirectives' has a wrong offset!");
static_assert(offsetof(BP_ArenaTutorialGameState_C_ExecuteUbergraph_BP_ArenaTutorialGameState, CallFunc_HasTag_ReturnValue) == 0x000039, "Member 'BP_ArenaTutorialGameState_C_ExecuteUbergraph_BP_ArenaTutorialGameState::CallFunc_HasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ArenaTutorialGameState_C_ExecuteUbergraph_BP_ArenaTutorialGameState, CallFunc_Not_PreBool_ReturnValue) == 0x00003A, "Member 'BP_ArenaTutorialGameState_C_ExecuteUbergraph_BP_ArenaTutorialGameState::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_ArenaTutorialGameState.BP_ArenaTutorialGameState_C.GetActiveNPEStage
// 0x0008 (0x0008 - 0x0000)
struct BP_ArenaTutorialGameState_C_GetActiveNPEStage final
{
public:
	struct FGameplayTag                           ActiveStageTag;                                    // 0x0000(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ArenaTutorialGameState_C_GetActiveNPEStage) == 0x000004, "Wrong alignment on BP_ArenaTutorialGameState_C_GetActiveNPEStage");
static_assert(sizeof(BP_ArenaTutorialGameState_C_GetActiveNPEStage) == 0x000008, "Wrong size on BP_ArenaTutorialGameState_C_GetActiveNPEStage");
static_assert(offsetof(BP_ArenaTutorialGameState_C_GetActiveNPEStage, ActiveStageTag) == 0x000000, "Member 'BP_ArenaTutorialGameState_C_GetActiveNPEStage::ActiveStageTag' has a wrong offset!");

// Function BP_ArenaTutorialGameState.BP_ArenaTutorialGameState_C.GetAssociatedRoles
// 0x0010 (0x0010 - 0x0000)
struct BP_ArenaTutorialGameState_C_GetAssociatedRoles final
{
public:
	TArray<ECharacterRole>                        Roles;                                             // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BP_ArenaTutorialGameState_C_GetAssociatedRoles) == 0x000008, "Wrong alignment on BP_ArenaTutorialGameState_C_GetAssociatedRoles");
static_assert(sizeof(BP_ArenaTutorialGameState_C_GetAssociatedRoles) == 0x000010, "Wrong size on BP_ArenaTutorialGameState_C_GetAssociatedRoles");
static_assert(offsetof(BP_ArenaTutorialGameState_C_GetAssociatedRoles, Roles) == 0x000000, "Member 'BP_ArenaTutorialGameState_C_GetAssociatedRoles::Roles' has a wrong offset!");

// Function BP_ArenaTutorialGameState.BP_ArenaTutorialGameState_C.GetNPEAIDirectives
// 0x0020 (0x0020 - 0x0000)
struct BP_ArenaTutorialGameState_C_GetNPEAIDirectives final
{
public:
	struct FGameplayTagContainer                  AIDirectives_0;                                    // 0x0000(0x0020)(Parm, OutParm)
};
static_assert(alignof(BP_ArenaTutorialGameState_C_GetNPEAIDirectives) == 0x000008, "Wrong alignment on BP_ArenaTutorialGameState_C_GetNPEAIDirectives");
static_assert(sizeof(BP_ArenaTutorialGameState_C_GetNPEAIDirectives) == 0x000020, "Wrong size on BP_ArenaTutorialGameState_C_GetNPEAIDirectives");
static_assert(offsetof(BP_ArenaTutorialGameState_C_GetNPEAIDirectives, AIDirectives_0) == 0x000000, "Member 'BP_ArenaTutorialGameState_C_GetNPEAIDirectives::AIDirectives_0' has a wrong offset!");

// Function BP_ArenaTutorialGameState.BP_ArenaTutorialGameState_C.GetNPEGuide
// 0x0008 (0x0008 - 0x0000)
struct BP_ArenaTutorialGameState_C_GetNPEGuide final
{
public:
	class ABP_NPE_Guide_C*                        GuideActor;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ArenaTutorialGameState_C_GetNPEGuide) == 0x000008, "Wrong alignment on BP_ArenaTutorialGameState_C_GetNPEGuide");
static_assert(sizeof(BP_ArenaTutorialGameState_C_GetNPEGuide) == 0x000008, "Wrong size on BP_ArenaTutorialGameState_C_GetNPEGuide");
static_assert(offsetof(BP_ArenaTutorialGameState_C_GetNPEGuide, GuideActor) == 0x000000, "Member 'BP_ArenaTutorialGameState_C_GetNPEGuide::GuideActor' has a wrong offset!");

// Function BP_ArenaTutorialGameState.BP_ArenaTutorialGameState_C.GetNPEStages
// 0x0010 (0x0010 - 0x0000)
struct BP_ArenaTutorialGameState_C_GetNPEStages final
{
public:
	TArray<class ABP_NPE_Stage_C*>                Stages;                                            // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BP_ArenaTutorialGameState_C_GetNPEStages) == 0x000008, "Wrong alignment on BP_ArenaTutorialGameState_C_GetNPEStages");
static_assert(sizeof(BP_ArenaTutorialGameState_C_GetNPEStages) == 0x000010, "Wrong size on BP_ArenaTutorialGameState_C_GetNPEStages");
static_assert(offsetof(BP_ArenaTutorialGameState_C_GetNPEStages, Stages) == 0x000000, "Member 'BP_ArenaTutorialGameState_C_GetNPEStages::Stages' has a wrong offset!");

// Function BP_ArenaTutorialGameState.BP_ArenaTutorialGameState_C.GetObjectiveTimeRemaining
// 0x0008 (0x0008 - 0x0000)
struct BP_ArenaTutorialGameState_C_GetObjectiveTimeRemaining final
{
public:
	double                                        TimeRemaining;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ArenaTutorialGameState_C_GetObjectiveTimeRemaining) == 0x000008, "Wrong alignment on BP_ArenaTutorialGameState_C_GetObjectiveTimeRemaining");
static_assert(sizeof(BP_ArenaTutorialGameState_C_GetObjectiveTimeRemaining) == 0x000008, "Wrong size on BP_ArenaTutorialGameState_C_GetObjectiveTimeRemaining");
static_assert(offsetof(BP_ArenaTutorialGameState_C_GetObjectiveTimeRemaining, TimeRemaining) == 0x000000, "Member 'BP_ArenaTutorialGameState_C_GetObjectiveTimeRemaining::TimeRemaining' has a wrong offset!");

// Function BP_ArenaTutorialGameState.BP_ArenaTutorialGameState_C.SetActiveNPEStage
// 0x0008 (0x0008 - 0x0000)
struct BP_ArenaTutorialGameState_C_SetActiveNPEStage final
{
public:
	struct FGameplayTag                           ActiveStage;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ArenaTutorialGameState_C_SetActiveNPEStage) == 0x000004, "Wrong alignment on BP_ArenaTutorialGameState_C_SetActiveNPEStage");
static_assert(sizeof(BP_ArenaTutorialGameState_C_SetActiveNPEStage) == 0x000008, "Wrong size on BP_ArenaTutorialGameState_C_SetActiveNPEStage");
static_assert(offsetof(BP_ArenaTutorialGameState_C_SetActiveNPEStage, ActiveStage) == 0x000000, "Member 'BP_ArenaTutorialGameState_C_SetActiveNPEStage::ActiveStage' has a wrong offset!");

// Function BP_ArenaTutorialGameState.BP_ArenaTutorialGameState_C.SetNPEAIDirectives
// 0x000C (0x000C - 0x0000)
struct BP_ArenaTutorialGameState_C_SetNPEAIDirectives final
{
public:
	struct FGameplayTag                           NewAIDirective;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          ClearPreviousDirectives;                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ArenaTutorialGameState_C_SetNPEAIDirectives) == 0x000004, "Wrong alignment on BP_ArenaTutorialGameState_C_SetNPEAIDirectives");
static_assert(sizeof(BP_ArenaTutorialGameState_C_SetNPEAIDirectives) == 0x00000C, "Wrong size on BP_ArenaTutorialGameState_C_SetNPEAIDirectives");
static_assert(offsetof(BP_ArenaTutorialGameState_C_SetNPEAIDirectives, NewAIDirective) == 0x000000, "Member 'BP_ArenaTutorialGameState_C_SetNPEAIDirectives::NewAIDirective' has a wrong offset!");
static_assert(offsetof(BP_ArenaTutorialGameState_C_SetNPEAIDirectives, ClearPreviousDirectives) == 0x000008, "Member 'BP_ArenaTutorialGameState_C_SetNPEAIDirectives::ClearPreviousDirectives' has a wrong offset!");

}

