#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NPE_TutorialQuestTracker

#include "Basic.hpp"

#include "BP_NPE_TutorialQuestTracker_classes.hpp"
#include "BP_NPE_TutorialQuestTracker_parameters.hpp"


namespace SDK
{

// Function BP_NPE_TutorialQuestTracker.BP_NPE_TutorialQuestTracker_C.AreAllObjectivesCompleted
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FS_NPE_Quest_SubObjective>&Objectives                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool*                                   bIsComplete                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NPE_TutorialQuestTracker_C::AreAllObjectivesCompleted(TArray<struct FS_NPE_Quest_SubObjective>& Objectives, bool* bIsComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPE_TutorialQuestTracker_C", "AreAllObjectivesCompleted");

	Params::BP_NPE_TutorialQuestTracker_C_AreAllObjectivesCompleted Parms{};

	Parms.Objectives = std::move(Objectives);

	UObject::ProcessEvent(Func, &Parms);

	Objectives = std::move(Parms.Objectives);

	if (bIsComplete != nullptr)
		*bIsComplete = Parms.bIsComplete;
}


// Function BP_NPE_TutorialQuestTracker.BP_NPE_TutorialQuestTracker_C.BeginNPEQuest
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              QuestTag                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABP_NPE_TutorialQuestTracker_C::BeginNPEQuest(const struct FGameplayTag& QuestTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPE_TutorialQuestTracker_C", "BeginNPEQuest");

	Params::BP_NPE_TutorialQuestTracker_C_BeginNPEQuest Parms{};

	Parms.QuestTag = std::move(QuestTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPE_TutorialQuestTracker.BP_NPE_TutorialQuestTracker_C.CompleteNPEQuest
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              QuestTag                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABP_NPE_TutorialQuestTracker_C::CompleteNPEQuest(const struct FGameplayTag& QuestTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPE_TutorialQuestTracker_C", "CompleteNPEQuest");

	Params::BP_NPE_TutorialQuestTracker_C_CompleteNPEQuest Parms{};

	Parms.QuestTag = std::move(QuestTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPE_TutorialQuestTracker.BP_NPE_TutorialQuestTracker_C.CompleteNPEQuestObjective
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              ObjectiveTag                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABP_NPE_TutorialQuestTracker_C::CompleteNPEQuestObjective(const struct FGameplayTag& ObjectiveTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPE_TutorialQuestTracker_C", "CompleteNPEQuestObjective");

	Params::BP_NPE_TutorialQuestTracker_C_CompleteNPEQuestObjective Parms{};

	Parms.ObjectiveTag = std::move(ObjectiveTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPE_TutorialQuestTracker.BP_NPE_TutorialQuestTracker_C.ExecuteUbergraph_BP_NPE_TutorialQuestTracker
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NPE_TutorialQuestTracker_C::ExecuteUbergraph_BP_NPE_TutorialQuestTracker(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPE_TutorialQuestTracker_C", "ExecuteUbergraph_BP_NPE_TutorialQuestTracker");

	Params::BP_NPE_TutorialQuestTracker_C_ExecuteUbergraph_BP_NPE_TutorialQuestTracker Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPE_TutorialQuestTracker.BP_NPE_TutorialQuestTracker_C.FindQuestByObjective
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FGameplayTag&              ObjectiveTag                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag*                    QuestTag                                               (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void ABP_NPE_TutorialQuestTracker_C::FindQuestByObjective(const struct FGameplayTag& ObjectiveTag, struct FGameplayTag* QuestTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPE_TutorialQuestTracker_C", "FindQuestByObjective");

	Params::BP_NPE_TutorialQuestTracker_C_FindQuestByObjective Parms{};

	Parms.ObjectiveTag = std::move(ObjectiveTag);

	UObject::ProcessEvent(Func, &Parms);

	if (QuestTag != nullptr)
		*QuestTag = std::move(Parms.QuestTag);
}


// Function BP_NPE_TutorialQuestTracker.BP_NPE_TutorialQuestTracker_C.GetNPEQuestGoal
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FGameplayTag&              QuestTag                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32*                                  QuestGoal                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NPE_TutorialQuestTracker_C::GetNPEQuestGoal(const struct FGameplayTag& QuestTag, int32* QuestGoal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPE_TutorialQuestTracker_C", "GetNPEQuestGoal");

	Params::BP_NPE_TutorialQuestTracker_C_GetNPEQuestGoal Parms{};

	Parms.QuestTag = std::move(QuestTag);

	UObject::ProcessEvent(Func, &Parms);

	if (QuestGoal != nullptr)
		*QuestGoal = Parms.QuestGoal;
}


// Function BP_NPE_TutorialQuestTracker.BP_NPE_TutorialQuestTracker_C.GetObjective
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FS_NPE_Quest_SubObjective>&Objectives                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FGameplayTag&              ObjectiveTag                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FS_NPE_Quest_SubObjective*       bIsComplete                                            (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void ABP_NPE_TutorialQuestTracker_C::GetObjective(TArray<struct FS_NPE_Quest_SubObjective>& Objectives, const struct FGameplayTag& ObjectiveTag, struct FS_NPE_Quest_SubObjective* bIsComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPE_TutorialQuestTracker_C", "GetObjective");

	Params::BP_NPE_TutorialQuestTracker_C_GetObjective Parms{};

	Parms.Objectives = std::move(Objectives);
	Parms.ObjectiveTag = std::move(ObjectiveTag);

	UObject::ProcessEvent(Func, &Parms);

	Objectives = std::move(Parms.Objectives);

	if (bIsComplete != nullptr)
		*bIsComplete = std::move(Parms.bIsComplete);
}


// Function BP_NPE_TutorialQuestTracker.BP_NPE_TutorialQuestTracker_C.GetObjectiveGoal
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FGameplayTag&              ObjectiveTag                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32*                                  Goal                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NPE_TutorialQuestTracker_C::GetObjectiveGoal(const struct FGameplayTag& ObjectiveTag, int32* Goal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPE_TutorialQuestTracker_C", "GetObjectiveGoal");

	Params::BP_NPE_TutorialQuestTracker_C_GetObjectiveGoal Parms{};

	Parms.ObjectiveTag = std::move(ObjectiveTag);

	UObject::ProcessEvent(Func, &Parms);

	if (Goal != nullptr)
		*Goal = Parms.Goal;
}


// Function BP_NPE_TutorialQuestTracker.BP_NPE_TutorialQuestTracker_C.GetQuestObjectiveTags
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FGameplayTag&              QuestTag                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTagContainer*           ObjectiveTags                                          (Parm, OutParm)

void ABP_NPE_TutorialQuestTracker_C::GetQuestObjectiveTags(const struct FGameplayTag& QuestTag, struct FGameplayTagContainer* ObjectiveTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPE_TutorialQuestTracker_C", "GetQuestObjectiveTags");

	Params::BP_NPE_TutorialQuestTracker_C_GetQuestObjectiveTags Parms{};

	Parms.QuestTag = std::move(QuestTag);

	UObject::ProcessEvent(Func, &Parms);

	if (ObjectiveTags != nullptr)
		*ObjectiveTags = std::move(Parms.ObjectiveTags);
}


// Function BP_NPE_TutorialQuestTracker.BP_NPE_TutorialQuestTracker_C.GiveNPEQuestProgress
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              ObjectiveTag                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   ProgressIncrement                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NPE_TutorialQuestTracker_C::GiveNPEQuestProgress(const struct FGameplayTag& ObjectiveTag, int32 ProgressIncrement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPE_TutorialQuestTracker_C", "GiveNPEQuestProgress");

	Params::BP_NPE_TutorialQuestTracker_C_GiveNPEQuestProgress Parms{};

	Parms.ObjectiveTag = std::move(ObjectiveTag);
	Parms.ProgressIncrement = ProgressIncrement;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPE_TutorialQuestTracker.BP_NPE_TutorialQuestTracker_C.IncrementNPEQuestProgress
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              QuestTag                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   Increment                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NPE_TutorialQuestTracker_C::IncrementNPEQuestProgress(const struct FGameplayTag& QuestTag, int32 Increment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPE_TutorialQuestTracker_C", "IncrementNPEQuestProgress");

	Params::BP_NPE_TutorialQuestTracker_C_IncrementNPEQuestProgress Parms{};

	Parms.QuestTag = std::move(QuestTag);
	Parms.Increment = Increment;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPE_TutorialQuestTracker.BP_NPE_TutorialQuestTracker_C.IsObjectiveCompleted
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FS_NPE_Quest_SubObjective>&Objectives                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FGameplayTag&              ObjectiveTag                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool*                                   bIsComplete                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NPE_TutorialQuestTracker_C::IsObjectiveCompleted(TArray<struct FS_NPE_Quest_SubObjective>& Objectives, const struct FGameplayTag& ObjectiveTag, bool* bIsComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPE_TutorialQuestTracker_C", "IsObjectiveCompleted");

	Params::BP_NPE_TutorialQuestTracker_C_IsObjectiveCompleted Parms{};

	Parms.Objectives = std::move(Objectives);
	Parms.ObjectiveTag = std::move(ObjectiveTag);

	UObject::ProcessEvent(Func, &Parms);

	Objectives = std::move(Parms.Objectives);

	if (bIsComplete != nullptr)
		*bIsComplete = Parms.bIsComplete;
}


// Function BP_NPE_TutorialQuestTracker.BP_NPE_TutorialQuestTracker_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_NPE_TutorialQuestTracker_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPE_TutorialQuestTracker_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NPE_TutorialQuestTracker.BP_NPE_TutorialQuestTracker_C.SetNewNPEQuestList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_NPE_QuestConfig>&      QuestList                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_NPE_TutorialQuestTracker_C::SetNewNPEQuestList(TArray<struct FS_NPE_QuestConfig>& QuestList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPE_TutorialQuestTracker_C", "SetNewNPEQuestList");

	Params::BP_NPE_TutorialQuestTracker_C_SetNewNPEQuestList Parms{};

	Parms.QuestList = std::move(QuestList);

	UObject::ProcessEvent(Func, &Parms);

	QuestList = std::move(Parms.QuestList);
}

}

