#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_L_LoadingScreenWidget

#include "Basic.hpp"

#include "HemingwayUI_structs.hpp"
#include "Hemingway_structs.hpp"


namespace SDK::Params
{

// Function WBP_L_LoadingScreenWidget.WBP_L_LoadingScreenWidget_C.AddedGodIconWidget
// 0x0008 (0x0008 - 0x0000)
struct WBP_L_LoadingScreenWidget_C_AddedGodIconWidget final
{
public:
	class UHWLoadingScreenGodIconWidget*          AddedWidget;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_L_LoadingScreenWidget_C_AddedGodIconWidget) == 0x000008, "Wrong alignment on WBP_L_LoadingScreenWidget_C_AddedGodIconWidget");
static_assert(sizeof(WBP_L_LoadingScreenWidget_C_AddedGodIconWidget) == 0x000008, "Wrong size on WBP_L_LoadingScreenWidget_C_AddedGodIconWidget");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_AddedGodIconWidget, AddedWidget) == 0x000000, "Member 'WBP_L_LoadingScreenWidget_C_AddedGodIconWidget::AddedWidget' has a wrong offset!");

// Function WBP_L_LoadingScreenWidget.WBP_L_LoadingScreenWidget_C.AddedPlayerEntryWidget
// 0x0030 (0x0030 - 0x0000)
struct WBP_L_LoadingScreenWidget_C_AddedPlayerEntryWidget final
{
public:
	class UHWPlayerCardWidget*                    AddedWidget;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_S_PlayerCard_C*                    K2Node_DynamicCast_AsWBP_S_Player_Card;            // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFriendly_ReturnValue;                   // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBox*                         K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBoxSlot*                     CallFunc_AddChildToHorizontalBox_ReturnValue;      // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_L_LoadingScreenWidget_C_AddedPlayerEntryWidget) == 0x000008, "Wrong alignment on WBP_L_LoadingScreenWidget_C_AddedPlayerEntryWidget");
static_assert(sizeof(WBP_L_LoadingScreenWidget_C_AddedPlayerEntryWidget) == 0x000030, "Wrong size on WBP_L_LoadingScreenWidget_C_AddedPlayerEntryWidget");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_AddedPlayerEntryWidget, AddedWidget) == 0x000000, "Member 'WBP_L_LoadingScreenWidget_C_AddedPlayerEntryWidget::AddedWidget' has a wrong offset!");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_AddedPlayerEntryWidget, Temp_bool_Variable) == 0x000008, "Member 'WBP_L_LoadingScreenWidget_C_AddedPlayerEntryWidget::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_AddedPlayerEntryWidget, K2Node_DynamicCast_AsWBP_S_Player_Card) == 0x000010, "Member 'WBP_L_LoadingScreenWidget_C_AddedPlayerEntryWidget::K2Node_DynamicCast_AsWBP_S_Player_Card' has a wrong offset!");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_AddedPlayerEntryWidget, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WBP_L_LoadingScreenWidget_C_AddedPlayerEntryWidget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_AddedPlayerEntryWidget, CallFunc_IsFriendly_ReturnValue) == 0x000019, "Member 'WBP_L_LoadingScreenWidget_C_AddedPlayerEntryWidget::CallFunc_IsFriendly_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_AddedPlayerEntryWidget, K2Node_Select_Default) == 0x000020, "Member 'WBP_L_LoadingScreenWidget_C_AddedPlayerEntryWidget::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_AddedPlayerEntryWidget, CallFunc_AddChildToHorizontalBox_ReturnValue) == 0x000028, "Member 'WBP_L_LoadingScreenWidget_C_AddedPlayerEntryWidget::CallFunc_AddChildToHorizontalBox_ReturnValue' has a wrong offset!");

// Function WBP_L_LoadingScreenWidget.WBP_L_LoadingScreenWidget_C.ExecuteUbergraph_WBP_L_LoadingScreenWidget
// 0x01D0 (0x01D0 - 0x0000)
struct WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0020(0x0018)()
	int32                                         K2Node_Event_TeamId;                               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWGameModeInfo                        K2Node_Event_GameModeInfo;                         // 0x0040(0x00F8)(ConstParm)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue_1;             // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13A[0x6];                                      // 0x013A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWGameInstance*                        CallFunc_GetHWGameInstance_ReturnValue;            // 0x0140(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class URHQueueDataFactory*                    CallFunc_GetQueueDataFactory_ReturnValue;          // 0x0148(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWQueueDataFactory*                    K2Node_DynamicCast_AsHWQueue_Data_Factory;         // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0168(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0180(0x0018)()
	class FText                                   K2Node_Select_Default_1;                           // 0x0198(0x0018)()
	bool                                          Temp_bool_Variable_2;                              // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_2;                           // 0x01B8(0x0018)()
};
static_assert(alignof(WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget) == 0x000008, "Wrong alignment on WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget");
static_assert(sizeof(WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget) == 0x0001D0, "Wrong size on WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget, EntryPoint) == 0x000000, "Member 'WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget, Temp_bool_Variable) == 0x000004, "Member 'WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget, Temp_text_Variable) == 0x000008, "Member 'WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget, Temp_text_Variable_1) == 0x000020, "Member 'WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget, K2Node_Event_TeamId) == 0x000038, "Member 'WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget::K2Node_Event_TeamId' has a wrong offset!");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget, K2Node_SwitchInteger_CmpSuccess) == 0x00003C, "Member 'WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget, K2Node_Event_IsDesignTime) == 0x00003D, "Member 'WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget, K2Node_Event_GameModeInfo) == 0x000040, "Member 'WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget::K2Node_Event_GameModeInfo' has a wrong offset!");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget, CallFunc_ClassIsChildOf_ReturnValue) == 0x000138, "Member 'WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget, CallFunc_ClassIsChildOf_ReturnValue_1) == 0x000139, "Member 'WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget::CallFunc_ClassIsChildOf_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget, CallFunc_GetHWGameInstance_ReturnValue) == 0x000140, "Member 'WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget::CallFunc_GetHWGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget, CallFunc_GetQueueDataFactory_ReturnValue) == 0x000148, "Member 'WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget::CallFunc_GetQueueDataFactory_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget, Temp_bool_Variable_1) == 0x000150, "Member 'WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget, K2Node_DynamicCast_AsHWQueue_Data_Factory) == 0x000158, "Member 'WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget::K2Node_DynamicCast_AsHWQueue_Data_Factory' has a wrong offset!");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget, K2Node_DynamicCast_bSuccess) == 0x000160, "Member 'WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget, K2Node_Select_Default) == 0x000168, "Member 'WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget, Temp_text_Variable_2) == 0x000180, "Member 'WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget, K2Node_Select_Default_1) == 0x000198, "Member 'WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget, Temp_bool_Variable_2) == 0x0001B0, "Member 'WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget, K2Node_Select_Default_2) == 0x0001B8, "Member 'WBP_L_LoadingScreenWidget_C_ExecuteUbergraph_WBP_L_LoadingScreenWidget::K2Node_Select_Default_2' has a wrong offset!");

// Function WBP_L_LoadingScreenWidget.WBP_L_LoadingScreenWidget_C.InitializeWidget
// 0x0008 (0x0008 - 0x0000)
struct WBP_L_LoadingScreenWidget_C_InitializeWidget final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_L_LoadingScreenWidget_C_InitializeWidget) == 0x000008, "Wrong alignment on WBP_L_LoadingScreenWidget_C_InitializeWidget");
static_assert(sizeof(WBP_L_LoadingScreenWidget_C_InitializeWidget) == 0x000008, "Wrong size on WBP_L_LoadingScreenWidget_C_InitializeWidget");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_InitializeWidget, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'WBP_L_LoadingScreenWidget_C_InitializeWidget::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_L_LoadingScreenWidget.WBP_L_LoadingScreenWidget_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_L_LoadingScreenWidget_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_L_LoadingScreenWidget_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_L_LoadingScreenWidget_C_PreConstruct");
static_assert(sizeof(WBP_L_LoadingScreenWidget_C_PreConstruct) == 0x000001, "Wrong size on WBP_L_LoadingScreenWidget_C_PreConstruct");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_L_LoadingScreenWidget_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_L_LoadingScreenWidget.WBP_L_LoadingScreenWidget_C.SetupDesignDisplay
// 0x0068 (0x0068 - 0x0000)
struct WBP_L_LoadingScreenWidget_C_SetupDesignDisplay final
{
public:
	TArray<class UHWCollectionItem*>              K2Node_MakeArray_Array;                            // 0x0000(0x0010)(ReferenceParm)
	struct FHWLoadingScreenTestData               K2Node_MakeStruct_HWLoadingScreenTestData;         // 0x0010(0x0038)()
	TArray<struct FHWLoadingScreenTestData>       K2Node_MakeArray_Array_1;                          // 0x0048(0x0010)(ReferenceParm)
	TArray<struct FHWLoadingScreenTestData>       K2Node_MakeArray_Array_2;                          // 0x0058(0x0010)(ReferenceParm)
};
static_assert(alignof(WBP_L_LoadingScreenWidget_C_SetupDesignDisplay) == 0x000008, "Wrong alignment on WBP_L_LoadingScreenWidget_C_SetupDesignDisplay");
static_assert(sizeof(WBP_L_LoadingScreenWidget_C_SetupDesignDisplay) == 0x000068, "Wrong size on WBP_L_LoadingScreenWidget_C_SetupDesignDisplay");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_SetupDesignDisplay, K2Node_MakeArray_Array) == 0x000000, "Member 'WBP_L_LoadingScreenWidget_C_SetupDesignDisplay::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_SetupDesignDisplay, K2Node_MakeStruct_HWLoadingScreenTestData) == 0x000010, "Member 'WBP_L_LoadingScreenWidget_C_SetupDesignDisplay::K2Node_MakeStruct_HWLoadingScreenTestData' has a wrong offset!");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_SetupDesignDisplay, K2Node_MakeArray_Array_1) == 0x000048, "Member 'WBP_L_LoadingScreenWidget_C_SetupDesignDisplay::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_SetupDesignDisplay, K2Node_MakeArray_Array_2) == 0x000058, "Member 'WBP_L_LoadingScreenWidget_C_SetupDesignDisplay::K2Node_MakeArray_Array_2' has a wrong offset!");

// Function WBP_L_LoadingScreenWidget.WBP_L_LoadingScreenWidget_C.UpdateGameModeDisplay
// 0x00F8 (0x00F8 - 0x0000)
struct WBP_L_LoadingScreenWidget_C_UpdateGameModeDisplay final
{
public:
	struct FHWGameModeInfo                        GameModeInfo;                                      // 0x0000(0x00F8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_L_LoadingScreenWidget_C_UpdateGameModeDisplay) == 0x000008, "Wrong alignment on WBP_L_LoadingScreenWidget_C_UpdateGameModeDisplay");
static_assert(sizeof(WBP_L_LoadingScreenWidget_C_UpdateGameModeDisplay) == 0x0000F8, "Wrong size on WBP_L_LoadingScreenWidget_C_UpdateGameModeDisplay");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_UpdateGameModeDisplay, GameModeInfo) == 0x000000, "Member 'WBP_L_LoadingScreenWidget_C_UpdateGameModeDisplay::GameModeInfo' has a wrong offset!");

// Function WBP_L_LoadingScreenWidget.WBP_L_LoadingScreenWidget_C.UpdateLocalTeamId
// 0x0004 (0x0004 - 0x0000)
struct WBP_L_LoadingScreenWidget_C_UpdateLocalTeamId final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_L_LoadingScreenWidget_C_UpdateLocalTeamId) == 0x000004, "Wrong alignment on WBP_L_LoadingScreenWidget_C_UpdateLocalTeamId");
static_assert(sizeof(WBP_L_LoadingScreenWidget_C_UpdateLocalTeamId) == 0x000004, "Wrong size on WBP_L_LoadingScreenWidget_C_UpdateLocalTeamId");
static_assert(offsetof(WBP_L_LoadingScreenWidget_C_UpdateLocalTeamId, TeamId) == 0x000000, "Member 'WBP_L_LoadingScreenWidget_C_UpdateLocalTeamId::TeamId' has a wrong offset!");

}

