#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HiRezAutomation

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "HiRezAutomation_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class HiRezAutomation.HirezAutomation_PerfHelper
// 0x0000 (0x0298 - 0x0298)
class AHirezAutomation_PerfHelper : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HirezAutomation_PerfHelper">();
	}
	static class AHirezAutomation_PerfHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHirezAutomation_PerfHelper>();
	}
};
static_assert(alignof(AHirezAutomation_PerfHelper) == 0x000008, "Wrong alignment on AHirezAutomation_PerfHelper");
static_assert(sizeof(AHirezAutomation_PerfHelper) == 0x000298, "Wrong size on AHirezAutomation_PerfHelper");

// Class HiRezAutomation.PGame_PerformanceCaptureSettings
// 0x0068 (0x0090 - 0x0028)
class UPGame_PerformanceCaptureSettings final : public UObject
{
public:
	float                                         FOV;                                               // 0x0028(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           StatsForAll;                                       // 0x0030(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FName>                           StatsForMap;                                       // 0x0040(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FName>                           StatsForCharacter;                                 // 0x0050(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FString>                         MapsToProfile;                                     // 0x0060(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	float                                         StartingOffsetTime;                                // 0x0070(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfSamples;                                   // 0x0074(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeBetweenSamples;                                // 0x0078(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPGame_PerformanceCaptureProfile> Profiles;                                        // 0x0080(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PGame_PerformanceCaptureSettings">();
	}
	static class UPGame_PerformanceCaptureSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPGame_PerformanceCaptureSettings>();
	}
};
static_assert(alignof(UPGame_PerformanceCaptureSettings) == 0x000008, "Wrong alignment on UPGame_PerformanceCaptureSettings");
static_assert(sizeof(UPGame_PerformanceCaptureSettings) == 0x000090, "Wrong size on UPGame_PerformanceCaptureSettings");
static_assert(offsetof(UPGame_PerformanceCaptureSettings, FOV) == 0x000028, "Member 'UPGame_PerformanceCaptureSettings::FOV' has a wrong offset!");
static_assert(offsetof(UPGame_PerformanceCaptureSettings, StatsForAll) == 0x000030, "Member 'UPGame_PerformanceCaptureSettings::StatsForAll' has a wrong offset!");
static_assert(offsetof(UPGame_PerformanceCaptureSettings, StatsForMap) == 0x000040, "Member 'UPGame_PerformanceCaptureSettings::StatsForMap' has a wrong offset!");
static_assert(offsetof(UPGame_PerformanceCaptureSettings, StatsForCharacter) == 0x000050, "Member 'UPGame_PerformanceCaptureSettings::StatsForCharacter' has a wrong offset!");
static_assert(offsetof(UPGame_PerformanceCaptureSettings, MapsToProfile) == 0x000060, "Member 'UPGame_PerformanceCaptureSettings::MapsToProfile' has a wrong offset!");
static_assert(offsetof(UPGame_PerformanceCaptureSettings, StartingOffsetTime) == 0x000070, "Member 'UPGame_PerformanceCaptureSettings::StartingOffsetTime' has a wrong offset!");
static_assert(offsetof(UPGame_PerformanceCaptureSettings, NumberOfSamples) == 0x000074, "Member 'UPGame_PerformanceCaptureSettings::NumberOfSamples' has a wrong offset!");
static_assert(offsetof(UPGame_PerformanceCaptureSettings, TimeBetweenSamples) == 0x000078, "Member 'UPGame_PerformanceCaptureSettings::TimeBetweenSamples' has a wrong offset!");
static_assert(offsetof(UPGame_PerformanceCaptureSettings, Profiles) == 0x000080, "Member 'UPGame_PerformanceCaptureSettings::Profiles' has a wrong offset!");

}

