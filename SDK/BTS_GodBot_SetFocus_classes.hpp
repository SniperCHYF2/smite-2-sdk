#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_GodBot_SetFocus

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Hemingway_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C
// 0x0120 (0x01B8 - 0x0098)
class UBTS_GodBot_SetFocus_C final : public UBTService_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0098(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 CurrentTargetActorKey;                             // 0x00A0(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 MovementTargetKey;                                 // 0x00C8(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 NearestEnemyTowerKey;                              // 0x00F0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        MaxDistanceToCurrentTarget;                        // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinDistanceToFocusMoveTarget;                      // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Reliability;                                       // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanFocusAllyGod;                                   // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x0131(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanFocusTargetWhenMassivelyDisadvantaged;          // 0x0132(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_133[0x5];                                      // 0x0133(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlackboardKeySelector                 CombatAdvantageKey;                                // 0x0138(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 RulesOfEngagementBlackboardKey;                    // 0x0160(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	bool                                          bConsiderRulesOfEngagement;                        // 0x0188(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CachedApproximateInhandRange;                      // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDetectedRapidDirectionChange;                     // 0x0190(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PreviousMoveDirection;                             // 0x0198(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DirectionChangeCooldownTime;                       // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFiringAbility;                                   // 0x01B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CanFocusCurrentTarget(class AActor* CurrentTargetActor, class AActor* ControlledPawn, class AAIController* OwnerController, bool* CanTarget);
	void DetectRapidDirectionChange(class AAIController* InController, class APawn* InPawn);
	void DirectionChangeCooldownFinished();
	void DrawDebug(class AAIController* OwnerController, class AActor* OwnerPawn, float DrawDuration);
	void ExecuteUbergraph_BTS_GodBot_SetFocus(int32 EntryPoint);
	void IsActorStealthToMe(class APawn* OwnedPawn, class AActor* InActor, bool* IsStealthed);
	void OnAbilityPhaseChanged(class UHWAbilitySystemComponent* AbilitySystem, const struct FGameplayAbilitySpecHandle& AbilityHandle, const struct FGameplayTagContainer& AbilityTags, const EAbilityFlowPhase PrevPhase, const EAbilityFlowPhase NextPhase);
	void ReceiveActivationAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveDeactivationAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void SetNewFocus(class AAIController* OwnerController, class APawn* ControlledPawn, bool* Success);
	void TryFocusCurrentTarget(class AAIController* OwnerController, class APawn* ControlledPawn, bool* Success);
	void TryFocusEnemyTower(class AAIController* OwnerController, bool* Success);
	void TryFocusForwardMovement(class AAIController* OwnerController, class APawn* ControlledPawn, bool* Success);
	void TryFocusOnAllyGod(class AAIController* OwnerController, class APawn* ControlledPawn, bool* Success);
	void TryFocusTowardEnemy(class AAIController* OwnerController, class APawn* ControlledPawn, bool* Success);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTS_GodBot_SetFocus_C">();
	}
	static class UBTS_GodBot_SetFocus_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTS_GodBot_SetFocus_C>();
	}
};
static_assert(alignof(UBTS_GodBot_SetFocus_C) == 0x000008, "Wrong alignment on UBTS_GodBot_SetFocus_C");
static_assert(sizeof(UBTS_GodBot_SetFocus_C) == 0x0001B8, "Wrong size on UBTS_GodBot_SetFocus_C");
static_assert(offsetof(UBTS_GodBot_SetFocus_C, UberGraphFrame) == 0x000098, "Member 'UBTS_GodBot_SetFocus_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTS_GodBot_SetFocus_C, CurrentTargetActorKey) == 0x0000A0, "Member 'UBTS_GodBot_SetFocus_C::CurrentTargetActorKey' has a wrong offset!");
static_assert(offsetof(UBTS_GodBot_SetFocus_C, MovementTargetKey) == 0x0000C8, "Member 'UBTS_GodBot_SetFocus_C::MovementTargetKey' has a wrong offset!");
static_assert(offsetof(UBTS_GodBot_SetFocus_C, NearestEnemyTowerKey) == 0x0000F0, "Member 'UBTS_GodBot_SetFocus_C::NearestEnemyTowerKey' has a wrong offset!");
static_assert(offsetof(UBTS_GodBot_SetFocus_C, MaxDistanceToCurrentTarget) == 0x000118, "Member 'UBTS_GodBot_SetFocus_C::MaxDistanceToCurrentTarget' has a wrong offset!");
static_assert(offsetof(UBTS_GodBot_SetFocus_C, MinDistanceToFocusMoveTarget) == 0x000120, "Member 'UBTS_GodBot_SetFocus_C::MinDistanceToFocusMoveTarget' has a wrong offset!");
static_assert(offsetof(UBTS_GodBot_SetFocus_C, Reliability) == 0x000128, "Member 'UBTS_GodBot_SetFocus_C::Reliability' has a wrong offset!");
static_assert(offsetof(UBTS_GodBot_SetFocus_C, CanFocusAllyGod) == 0x000130, "Member 'UBTS_GodBot_SetFocus_C::CanFocusAllyGod' has a wrong offset!");
static_assert(offsetof(UBTS_GodBot_SetFocus_C, Debug) == 0x000131, "Member 'UBTS_GodBot_SetFocus_C::Debug' has a wrong offset!");
static_assert(offsetof(UBTS_GodBot_SetFocus_C, CanFocusTargetWhenMassivelyDisadvantaged) == 0x000132, "Member 'UBTS_GodBot_SetFocus_C::CanFocusTargetWhenMassivelyDisadvantaged' has a wrong offset!");
static_assert(offsetof(UBTS_GodBot_SetFocus_C, CombatAdvantageKey) == 0x000138, "Member 'UBTS_GodBot_SetFocus_C::CombatAdvantageKey' has a wrong offset!");
static_assert(offsetof(UBTS_GodBot_SetFocus_C, RulesOfEngagementBlackboardKey) == 0x000160, "Member 'UBTS_GodBot_SetFocus_C::RulesOfEngagementBlackboardKey' has a wrong offset!");
static_assert(offsetof(UBTS_GodBot_SetFocus_C, bConsiderRulesOfEngagement) == 0x000188, "Member 'UBTS_GodBot_SetFocus_C::bConsiderRulesOfEngagement' has a wrong offset!");
static_assert(offsetof(UBTS_GodBot_SetFocus_C, CachedApproximateInhandRange) == 0x00018C, "Member 'UBTS_GodBot_SetFocus_C::CachedApproximateInhandRange' has a wrong offset!");
static_assert(offsetof(UBTS_GodBot_SetFocus_C, bDetectedRapidDirectionChange) == 0x000190, "Member 'UBTS_GodBot_SetFocus_C::bDetectedRapidDirectionChange' has a wrong offset!");
static_assert(offsetof(UBTS_GodBot_SetFocus_C, PreviousMoveDirection) == 0x000198, "Member 'UBTS_GodBot_SetFocus_C::PreviousMoveDirection' has a wrong offset!");
static_assert(offsetof(UBTS_GodBot_SetFocus_C, DirectionChangeCooldownTime) == 0x0001B0, "Member 'UBTS_GodBot_SetFocus_C::DirectionChangeCooldownTime' has a wrong offset!");
static_assert(offsetof(UBTS_GodBot_SetFocus_C, IsFiringAbility) == 0x0001B4, "Member 'UBTS_GodBot_SetFocus_C::IsFiringAbility' has a wrong offset!");

}

