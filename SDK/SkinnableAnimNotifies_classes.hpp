#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SkinnableAnimNotifies

#include "Basic.hpp"

#include "SceneComponentPools_structs.hpp"
#include "SkinnableAnimNotifies_structs.hpp"
#include "Engine_classes.hpp"
#include "NiagaraAnimNotifies_classes.hpp"


namespace SDK
{

// Class SkinnableAnimNotifies.AnimNotifyState_SkinnedPropBase
// 0x0080 (0x00B0 - 0x0030)
class UAnimNotifyState_SkinnedPropBase : public UAnimNotifyState
{
public:
	class FName                                   SkinObjectName;                                    // 0x0030(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MeshSkinKeyword;                                   // 0x0038(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ComponentClassSkinKeyword;                         // 0x0040(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropIdentifier;                                    // 0x0048(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtendedLifetime;                                  // 0x0050(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipExtendedLifetime;                             // 0x0054(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoolAttachmentInfo                    PropAttachmentInfo;                                // 0x0058(0x0058)(Edit, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_SkinnedPropBase">();
	}
	static class UAnimNotifyState_SkinnedPropBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_SkinnedPropBase>();
	}
};
static_assert(alignof(UAnimNotifyState_SkinnedPropBase) == 0x000008, "Wrong alignment on UAnimNotifyState_SkinnedPropBase");
static_assert(sizeof(UAnimNotifyState_SkinnedPropBase) == 0x0000B0, "Wrong size on UAnimNotifyState_SkinnedPropBase");
static_assert(offsetof(UAnimNotifyState_SkinnedPropBase, SkinObjectName) == 0x000030, "Member 'UAnimNotifyState_SkinnedPropBase::SkinObjectName' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_SkinnedPropBase, MeshSkinKeyword) == 0x000038, "Member 'UAnimNotifyState_SkinnedPropBase::MeshSkinKeyword' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_SkinnedPropBase, ComponentClassSkinKeyword) == 0x000040, "Member 'UAnimNotifyState_SkinnedPropBase::ComponentClassSkinKeyword' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_SkinnedPropBase, PropIdentifier) == 0x000048, "Member 'UAnimNotifyState_SkinnedPropBase::PropIdentifier' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_SkinnedPropBase, ExtendedLifetime) == 0x000050, "Member 'UAnimNotifyState_SkinnedPropBase::ExtendedLifetime' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_SkinnedPropBase, bSkipExtendedLifetime) == 0x000054, "Member 'UAnimNotifyState_SkinnedPropBase::bSkipExtendedLifetime' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_SkinnedPropBase, PropAttachmentInfo) == 0x000058, "Member 'UAnimNotifyState_SkinnedPropBase::PropAttachmentInfo' has a wrong offset!");

// Class SkinnableAnimNotifies.AnimNotifyState_SkinnedSkelProp
// 0x0010 (0x00C0 - 0x00B0)
class UAnimNotifyState_SkinnedSkelProp final : public UAnimNotifyState_SkinnedPropBase
{
public:
	class FName                                   AnimClassSkinKeyword;                              // 0x00B0(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ActivationMontage;                                 // 0x00B8(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_SkinnedSkelProp">();
	}
	static class UAnimNotifyState_SkinnedSkelProp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_SkinnedSkelProp>();
	}
};
static_assert(alignof(UAnimNotifyState_SkinnedSkelProp) == 0x000008, "Wrong alignment on UAnimNotifyState_SkinnedSkelProp");
static_assert(sizeof(UAnimNotifyState_SkinnedSkelProp) == 0x0000C0, "Wrong size on UAnimNotifyState_SkinnedSkelProp");
static_assert(offsetof(UAnimNotifyState_SkinnedSkelProp, AnimClassSkinKeyword) == 0x0000B0, "Member 'UAnimNotifyState_SkinnedSkelProp::AnimClassSkinKeyword' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_SkinnedSkelProp, ActivationMontage) == 0x0000B8, "Member 'UAnimNotifyState_SkinnedSkelProp::ActivationMontage' has a wrong offset!");

// Class SkinnableAnimNotifies.AnimNotifyState_SkinnedTimedNiagaraEffect
// 0x0008 (0x0080 - 0x0078)
class UAnimNotifyState_SkinnedTimedNiagaraEffect : public UAnimNotifyState_TimedNiagaraEffect
{
public:
	class FName                                   SkinKeyword;                                       // 0x0078(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_SkinnedTimedNiagaraEffect">();
	}
	static class UAnimNotifyState_SkinnedTimedNiagaraEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_SkinnedTimedNiagaraEffect>();
	}
};
static_assert(alignof(UAnimNotifyState_SkinnedTimedNiagaraEffect) == 0x000008, "Wrong alignment on UAnimNotifyState_SkinnedTimedNiagaraEffect");
static_assert(sizeof(UAnimNotifyState_SkinnedTimedNiagaraEffect) == 0x000080, "Wrong size on UAnimNotifyState_SkinnedTimedNiagaraEffect");
static_assert(offsetof(UAnimNotifyState_SkinnedTimedNiagaraEffect, SkinKeyword) == 0x000078, "Member 'UAnimNotifyState_SkinnedTimedNiagaraEffect::SkinKeyword' has a wrong offset!");

// Class SkinnableAnimNotifies.AnimNotifyState_SkinStaticProp
// 0x0000 (0x00B0 - 0x00B0)
class UAnimNotifyState_SkinStaticProp final : public UAnimNotifyState_SkinnedPropBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_SkinStaticProp">();
	}
	static class UAnimNotifyState_SkinStaticProp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_SkinStaticProp>();
	}
};
static_assert(alignof(UAnimNotifyState_SkinStaticProp) == 0x000008, "Wrong alignment on UAnimNotifyState_SkinStaticProp");
static_assert(sizeof(UAnimNotifyState_SkinStaticProp) == 0x0000B0, "Wrong size on UAnimNotifyState_SkinStaticProp");

// Class SkinnableAnimNotifies.SkelPropManagerComponent
// 0x0140 (0x01E0 - 0x00A0)
class USkelPropManagerComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0xD8];                                      // 0x00A0(0x00D8)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActiveSkelProp>                ActiveNamelessProps;                               // 0x0178(0x0010)(ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<struct FPropIdentifier, struct FActiveSkelProp> ActiveProps;                                // 0x0188(0x0050)(Transient, DuplicateTransient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	bool                                          bAllowSpawnerPooling;                              // 0x01D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9[0x3];                                      // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpawnerPoolingLifespan;                            // 0x01DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SkelPropManagerComponent">();
	}
	static class USkelPropManagerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkelPropManagerComponent>();
	}
};
static_assert(alignof(USkelPropManagerComponent) == 0x000008, "Wrong alignment on USkelPropManagerComponent");
static_assert(sizeof(USkelPropManagerComponent) == 0x0001E0, "Wrong size on USkelPropManagerComponent");
static_assert(offsetof(USkelPropManagerComponent, ActiveNamelessProps) == 0x000178, "Member 'USkelPropManagerComponent::ActiveNamelessProps' has a wrong offset!");
static_assert(offsetof(USkelPropManagerComponent, ActiveProps) == 0x000188, "Member 'USkelPropManagerComponent::ActiveProps' has a wrong offset!");
static_assert(offsetof(USkelPropManagerComponent, bAllowSpawnerPooling) == 0x0001D8, "Member 'USkelPropManagerComponent::bAllowSpawnerPooling' has a wrong offset!");
static_assert(offsetof(USkelPropManagerComponent, SpawnerPoolingLifespan) == 0x0001DC, "Member 'USkelPropManagerComponent::SpawnerPoolingLifespan' has a wrong offset!");

// Class SkinnableAnimNotifies.StaticPropManagerComponent
// 0x0140 (0x01E0 - 0x00A0)
class UStaticPropManagerComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0xD8];                                      // 0x00A0(0x00D8)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActiveStaticProp>              ActiveNamelessProps;                               // 0x0178(0x0010)(ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<struct FPropIdentifier, struct FActiveStaticProp> ActiveProps;                              // 0x0188(0x0050)(Transient, DuplicateTransient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	bool                                          bAllowSpawnerPooling;                              // 0x01D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9[0x3];                                      // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpawnerPoolingLifespan;                            // 0x01DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StaticPropManagerComponent">();
	}
	static class UStaticPropManagerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaticPropManagerComponent>();
	}
};
static_assert(alignof(UStaticPropManagerComponent) == 0x000008, "Wrong alignment on UStaticPropManagerComponent");
static_assert(sizeof(UStaticPropManagerComponent) == 0x0001E0, "Wrong size on UStaticPropManagerComponent");
static_assert(offsetof(UStaticPropManagerComponent, ActiveNamelessProps) == 0x000178, "Member 'UStaticPropManagerComponent::ActiveNamelessProps' has a wrong offset!");
static_assert(offsetof(UStaticPropManagerComponent, ActiveProps) == 0x000188, "Member 'UStaticPropManagerComponent::ActiveProps' has a wrong offset!");
static_assert(offsetof(UStaticPropManagerComponent, bAllowSpawnerPooling) == 0x0001D8, "Member 'UStaticPropManagerComponent::bAllowSpawnerPooling' has a wrong offset!");
static_assert(offsetof(UStaticPropManagerComponent, SpawnerPoolingLifespan) == 0x0001DC, "Member 'UStaticPropManagerComponent::SpawnerPoolingLifespan' has a wrong offset!");

}

