#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NPC_Tower

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Hemingway_classes.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NPC_Tower.BP_NPC_Tower_C
// 0x0140 (0x1540 - 0x1400)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_NPC_Tower_C : public AHWCharacter_NPC_Structure_WithBeam
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1400(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCapsuleComponent*                      NavObstacle;                                       // 0x1408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHWGroundTargetingPlacementBlockerComponent* HWGroundTargetingPlacementBlocker;            // 0x1410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Gameplay;                                          // 0x1418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        TowerCoreHealth;                                   // 0x1420(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TowerShieldHealth_A;                               // 0x1428(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TowerShieldHealth_B;                               // 0x1430(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TowerShieldHealth_C;                               // 0x1438(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTowerShieldAlive_A;                              // 0x1440(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTowerShieldAlive_B;                              // 0x1441(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTowerShieldAlive_C;                              // 0x1442(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1443[0x5];                                     // 0x1443(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TowerCoreMaxHealth;                                // 0x1448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TowerShieldMaxHealth;                              // 0x1450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_G_V1_WorldOverlay_TowerShieldHealthBar_C* UI_ShieldC;                                 // 0x1458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWBP_G_V1_WorldOverlay_TowerShieldHealthBar_C* UI_ShieldA;                                 // 0x1460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWBP_G_V1_WorldOverlay_TowerShieldHealthBar_C* UI_ShieldB;                                 // 0x1468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ShieldBuffColor;                                   // 0x1470(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasBuff;                                           // 0x1480(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1481[0x7];                                     // 0x1481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_G_V1_WorldOverlay_TowerShieldHealthBar_C* UI_Core;                                    // 0x1488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DMI_Pylon;                                         // 0x1490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTowerCoreAlive;                                  // 0x1498(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1499[0x7];                                     // 0x1499(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_Deployable_Bastion_C*>       BastionArray;                                      // 0x14A0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class FName                                   ShieldASocket;                                     // 0x14B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ShieldBSocket;                                     // 0x14B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ShieldCSocket;                                     // 0x14C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BastionCount;                                      // 0x14C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14CC[0x4];                                     // 0x14CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 EnemyLookAtTarget;                                 // 0x14D0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          HasDestructionStages;                              // 0x14D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14D9[0x7];                                     // 0x14D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<double>                                HealthThresholds;                                  // 0x14E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(int32 Stage, bool FinalStage)> OnDestructionStageReached;          // 0x14F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          SpawnRewards;                                      // 0x1500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanSpawnFinalReward;                               // 0x1501(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1502[0x6];                                     // 0x1502(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnCanNoLongerSpawnFinalReward;                     // 0x1508(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UClass*                                 GoldTowerBountyClass;                              // 0x1518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 BlueTowerBountyClass;                              // 0x1520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         NearbyMinionCount;                                 // 0x1528(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_152C[0x4];                                     // 0x152C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CurrentAITargetActor;                              // 0x1530(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ApplyAncientFuryDebuff();
	void BindRivalTowerEvents();
	void Destroy_Tower_Component();
	void DistributeDestructionStageReward(const struct FDamageEventData& DamageEvent);
	void EndAbilityCalled();
	void ExecuteUbergraph_BP_NPC_Tower(int32 EntryPoint);
	void Get_Bastion_Attach_Points(TArray<class USceneComponent*>* Component);
	void GetClosestEnemyGodWithinRadius(class AActor** ClosestGod);
	void GetLeashCapsule(class UPrimitiveComponent** LeashComponent);
	void GetLeashRadius(double* LeashRadius);
	void GetLeashVolume(TSoftObjectPtr<class ATriggerVolume>* LeashVolume);
	struct FVector GetLocToRightOrLeftOfInstigator(bool bRight, const struct FVector& InstigatorLoc, double MinDistance, double MaxDistance);
	void GetNearbyMinionCount(int32* MinionCount);
	void GetStartingWaypoints(TArray<TSoftObjectPtr<class AWaypoint_C>>* Waypoints);
	void IsInstigatorCloseToStructure(class AActor* InstigatorActor, bool* IsNearby);
	void MulticastDestructionStageEvent(const int32 Stage);
	void MulticastPlayHitFX();
	void OnDamageTaken(const struct FDamageEventData& DamageEvent);
	void OnDamageThresholdReached(int32 ThresholdIndex, const struct FDamageEventData& DamageEvent);
	void OnRep_CanSpawnFinalReward();
	void OnRivalTowerDestructionStageReached(int32 Stage, bool FinalStage);
	void OnTowerDestructionStageReached(int32 Stage, const struct FDamageEventData& DamageEvent);
	void ReceiveBeginPlay();
	void RegisterBastion(class ABP_Deployable_Bastion_C* Bastion);
	void RemoveAncientFuryDebuff();
	void RetrieveTargetActor(class AActor** CurrentTargetActor);
	void SpawnDestructionStageReward(const struct FDamageEventData& DamageEventData, class UClass* RewardActorClass, int32 NumToSpawn, bool RNGLoc);
	void UpdateNearbyMinionCount(int32 NewCount, int32* NewMinionCount);
	void UpdateTargetActor(class AActor* NewTargetActor);

	bool CanBeAffectedByCrit() const;
	bool CanBeAffectedByLifeSteal() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NPC_Tower_C">();
	}
	static class ABP_NPC_Tower_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_NPC_Tower_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_NPC_Tower_C) == 0x000010, "Wrong alignment on ABP_NPC_Tower_C");
static_assert(sizeof(ABP_NPC_Tower_C) == 0x001540, "Wrong size on ABP_NPC_Tower_C");
static_assert(offsetof(ABP_NPC_Tower_C, UberGraphFrame) == 0x001400, "Member 'ABP_NPC_Tower_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, NavObstacle) == 0x001408, "Member 'ABP_NPC_Tower_C::NavObstacle' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, HWGroundTargetingPlacementBlocker) == 0x001410, "Member 'ABP_NPC_Tower_C::HWGroundTargetingPlacementBlocker' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, Gameplay) == 0x001418, "Member 'ABP_NPC_Tower_C::Gameplay' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, TowerCoreHealth) == 0x001420, "Member 'ABP_NPC_Tower_C::TowerCoreHealth' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, TowerShieldHealth_A) == 0x001428, "Member 'ABP_NPC_Tower_C::TowerShieldHealth_A' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, TowerShieldHealth_B) == 0x001430, "Member 'ABP_NPC_Tower_C::TowerShieldHealth_B' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, TowerShieldHealth_C) == 0x001438, "Member 'ABP_NPC_Tower_C::TowerShieldHealth_C' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, IsTowerShieldAlive_A) == 0x001440, "Member 'ABP_NPC_Tower_C::IsTowerShieldAlive_A' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, IsTowerShieldAlive_B) == 0x001441, "Member 'ABP_NPC_Tower_C::IsTowerShieldAlive_B' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, IsTowerShieldAlive_C) == 0x001442, "Member 'ABP_NPC_Tower_C::IsTowerShieldAlive_C' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, TowerCoreMaxHealth) == 0x001448, "Member 'ABP_NPC_Tower_C::TowerCoreMaxHealth' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, TowerShieldMaxHealth) == 0x001450, "Member 'ABP_NPC_Tower_C::TowerShieldMaxHealth' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, UI_ShieldC) == 0x001458, "Member 'ABP_NPC_Tower_C::UI_ShieldC' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, UI_ShieldA) == 0x001460, "Member 'ABP_NPC_Tower_C::UI_ShieldA' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, UI_ShieldB) == 0x001468, "Member 'ABP_NPC_Tower_C::UI_ShieldB' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, ShieldBuffColor) == 0x001470, "Member 'ABP_NPC_Tower_C::ShieldBuffColor' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, HasBuff) == 0x001480, "Member 'ABP_NPC_Tower_C::HasBuff' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, UI_Core) == 0x001488, "Member 'ABP_NPC_Tower_C::UI_Core' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, DMI_Pylon) == 0x001490, "Member 'ABP_NPC_Tower_C::DMI_Pylon' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, IsTowerCoreAlive) == 0x001498, "Member 'ABP_NPC_Tower_C::IsTowerCoreAlive' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, BastionArray) == 0x0014A0, "Member 'ABP_NPC_Tower_C::BastionArray' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, ShieldASocket) == 0x0014B0, "Member 'ABP_NPC_Tower_C::ShieldASocket' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, ShieldBSocket) == 0x0014B8, "Member 'ABP_NPC_Tower_C::ShieldBSocket' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, ShieldCSocket) == 0x0014C0, "Member 'ABP_NPC_Tower_C::ShieldCSocket' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, BastionCount) == 0x0014C8, "Member 'ABP_NPC_Tower_C::BastionCount' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, EnemyLookAtTarget) == 0x0014D0, "Member 'ABP_NPC_Tower_C::EnemyLookAtTarget' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, HasDestructionStages) == 0x0014D8, "Member 'ABP_NPC_Tower_C::HasDestructionStages' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, HealthThresholds) == 0x0014E0, "Member 'ABP_NPC_Tower_C::HealthThresholds' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, OnDestructionStageReached) == 0x0014F0, "Member 'ABP_NPC_Tower_C::OnDestructionStageReached' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, SpawnRewards) == 0x001500, "Member 'ABP_NPC_Tower_C::SpawnRewards' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, CanSpawnFinalReward) == 0x001501, "Member 'ABP_NPC_Tower_C::CanSpawnFinalReward' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, OnCanNoLongerSpawnFinalReward) == 0x001508, "Member 'ABP_NPC_Tower_C::OnCanNoLongerSpawnFinalReward' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, GoldTowerBountyClass) == 0x001518, "Member 'ABP_NPC_Tower_C::GoldTowerBountyClass' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, BlueTowerBountyClass) == 0x001520, "Member 'ABP_NPC_Tower_C::BlueTowerBountyClass' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, NearbyMinionCount) == 0x001528, "Member 'ABP_NPC_Tower_C::NearbyMinionCount' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Tower_C, CurrentAITargetActor) == 0x001530, "Member 'ABP_NPC_Tower_C::CurrentAITargetActor' has a wrong offset!");

}

