#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AIGoal_Farm_Attack

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Hemingway_structs.hpp"
#include "Hemingway_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AIGoal_Farm_Attack.BP_AIGoal_Farm_Attack_C
// 0x0050 (0x0138 - 0x00E8)
class UBP_AIGoal_Farm_Attack_C : public UHWAIGoal
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        MaxDamagedByTime;                                  // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WeightPerHostileTarget;                            // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        EnemyGodNearbyDistance;                            // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinAttackLevel;                                    // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HostileThreatTimeout;                              // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ConsiderAdvantage;                                 // 0x0118(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EHWAdvantageTypes>                     ValidAdvantages;                                   // 0x0120(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly)
	double                                        TargetIsGodWeight;                                 // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	float CalculateWeight(class AHWAIController* InController);
	void CanAttackNearbyGod(class AHWAIController* InController, bool* ShouldAttack);
	bool CheckPreconditionsBP(class AHWAIController* InController);
	void EndGoalBP();
	void ExecuteUbergraph_BP_AIGoal_Farm_Attack(int32 EntryPoint);
	void HasMatchStarted(bool* MatchStarted);
	void ShouldOnlyReturnFire(class AHWAIController* InController, bool* ReturnFireOnly);
	void StartGoalBP();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AIGoal_Farm_Attack_C">();
	}
	static class UBP_AIGoal_Farm_Attack_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AIGoal_Farm_Attack_C>();
	}
};
static_assert(alignof(UBP_AIGoal_Farm_Attack_C) == 0x000008, "Wrong alignment on UBP_AIGoal_Farm_Attack_C");
static_assert(sizeof(UBP_AIGoal_Farm_Attack_C) == 0x000138, "Wrong size on UBP_AIGoal_Farm_Attack_C");
static_assert(offsetof(UBP_AIGoal_Farm_Attack_C, UberGraphFrame) == 0x0000E8, "Member 'UBP_AIGoal_Farm_Attack_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_Farm_Attack_C, MaxDamagedByTime) == 0x0000F0, "Member 'UBP_AIGoal_Farm_Attack_C::MaxDamagedByTime' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_Farm_Attack_C, WeightPerHostileTarget) == 0x0000F8, "Member 'UBP_AIGoal_Farm_Attack_C::WeightPerHostileTarget' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_Farm_Attack_C, EnemyGodNearbyDistance) == 0x000100, "Member 'UBP_AIGoal_Farm_Attack_C::EnemyGodNearbyDistance' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_Farm_Attack_C, MinAttackLevel) == 0x000108, "Member 'UBP_AIGoal_Farm_Attack_C::MinAttackLevel' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_Farm_Attack_C, HostileThreatTimeout) == 0x000110, "Member 'UBP_AIGoal_Farm_Attack_C::HostileThreatTimeout' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_Farm_Attack_C, ConsiderAdvantage) == 0x000118, "Member 'UBP_AIGoal_Farm_Attack_C::ConsiderAdvantage' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_Farm_Attack_C, ValidAdvantages) == 0x000120, "Member 'UBP_AIGoal_Farm_Attack_C::ValidAdvantages' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_Farm_Attack_C, TargetIsGodWeight) == 0x000130, "Member 'UBP_AIGoal_Farm_Attack_C::TargetIsGodWeight' has a wrong offset!");

}

