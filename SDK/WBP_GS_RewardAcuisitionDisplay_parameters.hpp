#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_GS_RewardAcuisitionDisplay

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function WBP_GS_RewardAcuisitionDisplay.WBP_GS_RewardAcuisitionDisplay_C.ExecuteUbergraph_WBP_GS_RewardAcuisitionDisplay
// 0x0060 (0x0060 - 0x0000)
struct WBP_GS_RewardAcuisitionDisplay_C_ExecuteUbergraph_WBP_GS_RewardAcuisitionDisplay final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UHWCollectionItem>       CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue; // 0x0008(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UHWCharacterItem>        CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue_1; // 0x0030(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	class UHWViewRedirectorSubsystem*             CallFunc_GetLocalPlayerSubsystem_ReturnValue;      // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GS_RewardAcuisitionDisplay_C_ExecuteUbergraph_WBP_GS_RewardAcuisitionDisplay) == 0x000008, "Wrong alignment on WBP_GS_RewardAcuisitionDisplay_C_ExecuteUbergraph_WBP_GS_RewardAcuisitionDisplay");
static_assert(sizeof(WBP_GS_RewardAcuisitionDisplay_C_ExecuteUbergraph_WBP_GS_RewardAcuisitionDisplay) == 0x000060, "Wrong size on WBP_GS_RewardAcuisitionDisplay_C_ExecuteUbergraph_WBP_GS_RewardAcuisitionDisplay");
static_assert(offsetof(WBP_GS_RewardAcuisitionDisplay_C_ExecuteUbergraph_WBP_GS_RewardAcuisitionDisplay, EntryPoint) == 0x000000, "Member 'WBP_GS_RewardAcuisitionDisplay_C_ExecuteUbergraph_WBP_GS_RewardAcuisitionDisplay::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_GS_RewardAcuisitionDisplay_C_ExecuteUbergraph_WBP_GS_RewardAcuisitionDisplay, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue) == 0x000008, "Member 'WBP_GS_RewardAcuisitionDisplay_C_ExecuteUbergraph_WBP_GS_RewardAcuisitionDisplay::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GS_RewardAcuisitionDisplay_C_ExecuteUbergraph_WBP_GS_RewardAcuisitionDisplay, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue_1) == 0x000030, "Member 'WBP_GS_RewardAcuisitionDisplay_C_ExecuteUbergraph_WBP_GS_RewardAcuisitionDisplay::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_GS_RewardAcuisitionDisplay_C_ExecuteUbergraph_WBP_GS_RewardAcuisitionDisplay, CallFunc_GetLocalPlayerSubsystem_ReturnValue) == 0x000058, "Member 'WBP_GS_RewardAcuisitionDisplay_C_ExecuteUbergraph_WBP_GS_RewardAcuisitionDisplay::CallFunc_GetLocalPlayerSubsystem_ReturnValue' has a wrong offset!");

// Function WBP_GS_RewardAcuisitionDisplay.WBP_GS_RewardAcuisitionDisplay_C.SetCharacterItem
// 0x0008 (0x0008 - 0x0000)
struct WBP_GS_RewardAcuisitionDisplay_C_SetCharacterItem final
{
public:
	const class UHWCharacterItem*                 InCharacterItem;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GS_RewardAcuisitionDisplay_C_SetCharacterItem) == 0x000008, "Wrong alignment on WBP_GS_RewardAcuisitionDisplay_C_SetCharacterItem");
static_assert(sizeof(WBP_GS_RewardAcuisitionDisplay_C_SetCharacterItem) == 0x000008, "Wrong size on WBP_GS_RewardAcuisitionDisplay_C_SetCharacterItem");
static_assert(offsetof(WBP_GS_RewardAcuisitionDisplay_C_SetCharacterItem, InCharacterItem) == 0x000000, "Member 'WBP_GS_RewardAcuisitionDisplay_C_SetCharacterItem::InCharacterItem' has a wrong offset!");

// Function WBP_GS_RewardAcuisitionDisplay.WBP_GS_RewardAcuisitionDisplay_C.SetCollectionItem
// 0x0060 (0x0060 - 0x0000)
struct WBP_GS_RewardAcuisitionDisplay_C_SetCollectionItem final
{
public:
	class UHWCollectionItem*                      CollectionItem;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           RarityStyleTag;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetItemName_ReturnValue;                  // 0x0018(0x0018)()
	TSoftObjectPtr<class UTexture2D>              CallFunc_GetIconTextureByTag_ReturnValue;          // 0x0030(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess;   // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GS_RewardAcuisitionDisplay_C_SetCollectionItem) == 0x000008, "Wrong alignment on WBP_GS_RewardAcuisitionDisplay_C_SetCollectionItem");
static_assert(sizeof(WBP_GS_RewardAcuisitionDisplay_C_SetCollectionItem) == 0x000060, "Wrong size on WBP_GS_RewardAcuisitionDisplay_C_SetCollectionItem");
static_assert(offsetof(WBP_GS_RewardAcuisitionDisplay_C_SetCollectionItem, CollectionItem) == 0x000000, "Member 'WBP_GS_RewardAcuisitionDisplay_C_SetCollectionItem::CollectionItem' has a wrong offset!");
static_assert(offsetof(WBP_GS_RewardAcuisitionDisplay_C_SetCollectionItem, RarityStyleTag) == 0x000008, "Member 'WBP_GS_RewardAcuisitionDisplay_C_SetCollectionItem::RarityStyleTag' has a wrong offset!");
static_assert(offsetof(WBP_GS_RewardAcuisitionDisplay_C_SetCollectionItem, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'WBP_GS_RewardAcuisitionDisplay_C_SetCollectionItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GS_RewardAcuisitionDisplay_C_SetCollectionItem, CallFunc_GetItemName_ReturnValue) == 0x000018, "Member 'WBP_GS_RewardAcuisitionDisplay_C_SetCollectionItem::CallFunc_GetItemName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GS_RewardAcuisitionDisplay_C_SetCollectionItem, CallFunc_GetIconTextureByTag_ReturnValue) == 0x000030, "Member 'WBP_GS_RewardAcuisitionDisplay_C_SetCollectionItem::CallFunc_GetIconTextureByTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GS_RewardAcuisitionDisplay_C_SetCollectionItem, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess) == 0x000058, "Member 'WBP_GS_RewardAcuisitionDisplay_C_SetCollectionItem::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess' has a wrong offset!");

// Function WBP_GS_RewardAcuisitionDisplay.WBP_GS_RewardAcuisitionDisplay_C.SetIsAscensionUnlock
// 0x0005 (0x0005 - 0x0000)
struct WBP_GS_RewardAcuisitionDisplay_C_SetIsAscensionUnlock final
{
public:
	bool                                          IsAscensionUnlock;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GS_RewardAcuisitionDisplay_C_SetIsAscensionUnlock) == 0x000001, "Wrong alignment on WBP_GS_RewardAcuisitionDisplay_C_SetIsAscensionUnlock");
static_assert(sizeof(WBP_GS_RewardAcuisitionDisplay_C_SetIsAscensionUnlock) == 0x000005, "Wrong size on WBP_GS_RewardAcuisitionDisplay_C_SetIsAscensionUnlock");
static_assert(offsetof(WBP_GS_RewardAcuisitionDisplay_C_SetIsAscensionUnlock, IsAscensionUnlock) == 0x000000, "Member 'WBP_GS_RewardAcuisitionDisplay_C_SetIsAscensionUnlock::IsAscensionUnlock' has a wrong offset!");
static_assert(offsetof(WBP_GS_RewardAcuisitionDisplay_C_SetIsAscensionUnlock, Temp_bool_Variable) == 0x000001, "Member 'WBP_GS_RewardAcuisitionDisplay_C_SetIsAscensionUnlock::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_GS_RewardAcuisitionDisplay_C_SetIsAscensionUnlock, Temp_byte_Variable) == 0x000002, "Member 'WBP_GS_RewardAcuisitionDisplay_C_SetIsAscensionUnlock::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_GS_RewardAcuisitionDisplay_C_SetIsAscensionUnlock, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_GS_RewardAcuisitionDisplay_C_SetIsAscensionUnlock::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_GS_RewardAcuisitionDisplay_C_SetIsAscensionUnlock, K2Node_Select_Default) == 0x000004, "Member 'WBP_GS_RewardAcuisitionDisplay_C_SetIsAscensionUnlock::K2Node_Select_Default' has a wrong offset!");

}

