#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_NPE_Guide

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Hemingway_structs.hpp"


namespace SDK::Params
{

// Function BPI_NPE_Guide.BPI_NPE_Guide_C.GetActiveNPEStage
// 0x0008 (0x0008 - 0x0000)
struct BPI_NPE_Guide_C_GetActiveNPEStage final
{
public:
	struct FGameplayTag                           ActiveStageTag;                                    // 0x0000(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_NPE_Guide_C_GetActiveNPEStage) == 0x000004, "Wrong alignment on BPI_NPE_Guide_C_GetActiveNPEStage");
static_assert(sizeof(BPI_NPE_Guide_C_GetActiveNPEStage) == 0x000008, "Wrong size on BPI_NPE_Guide_C_GetActiveNPEStage");
static_assert(offsetof(BPI_NPE_Guide_C_GetActiveNPEStage, ActiveStageTag) == 0x000000, "Member 'BPI_NPE_Guide_C_GetActiveNPEStage::ActiveStageTag' has a wrong offset!");

// Function BPI_NPE_Guide.BPI_NPE_Guide_C.GetAssociatedRoles
// 0x0010 (0x0010 - 0x0000)
struct BPI_NPE_Guide_C_GetAssociatedRoles final
{
public:
	TArray<ECharacterRole>                        Roles;                                             // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_NPE_Guide_C_GetAssociatedRoles) == 0x000008, "Wrong alignment on BPI_NPE_Guide_C_GetAssociatedRoles");
static_assert(sizeof(BPI_NPE_Guide_C_GetAssociatedRoles) == 0x000010, "Wrong size on BPI_NPE_Guide_C_GetAssociatedRoles");
static_assert(offsetof(BPI_NPE_Guide_C_GetAssociatedRoles, Roles) == 0x000000, "Member 'BPI_NPE_Guide_C_GetAssociatedRoles::Roles' has a wrong offset!");

// Function BPI_NPE_Guide.BPI_NPE_Guide_C.GetNPEAIDirectives
// 0x0020 (0x0020 - 0x0000)
struct BPI_NPE_Guide_C_GetNPEAIDirectives final
{
public:
	struct FGameplayTagContainer                  AIDirectives;                                      // 0x0000(0x0020)(Parm, OutParm)
};
static_assert(alignof(BPI_NPE_Guide_C_GetNPEAIDirectives) == 0x000008, "Wrong alignment on BPI_NPE_Guide_C_GetNPEAIDirectives");
static_assert(sizeof(BPI_NPE_Guide_C_GetNPEAIDirectives) == 0x000020, "Wrong size on BPI_NPE_Guide_C_GetNPEAIDirectives");
static_assert(offsetof(BPI_NPE_Guide_C_GetNPEAIDirectives, AIDirectives) == 0x000000, "Member 'BPI_NPE_Guide_C_GetNPEAIDirectives::AIDirectives' has a wrong offset!");

// Function BPI_NPE_Guide.BPI_NPE_Guide_C.GetNPEGuide
// 0x0008 (0x0008 - 0x0000)
struct BPI_NPE_Guide_C_GetNPEGuide final
{
public:
	class ABP_NPE_Guide_C*                        GuideActor;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_NPE_Guide_C_GetNPEGuide) == 0x000008, "Wrong alignment on BPI_NPE_Guide_C_GetNPEGuide");
static_assert(sizeof(BPI_NPE_Guide_C_GetNPEGuide) == 0x000008, "Wrong size on BPI_NPE_Guide_C_GetNPEGuide");
static_assert(offsetof(BPI_NPE_Guide_C_GetNPEGuide, GuideActor) == 0x000000, "Member 'BPI_NPE_Guide_C_GetNPEGuide::GuideActor' has a wrong offset!");

// Function BPI_NPE_Guide.BPI_NPE_Guide_C.GetNPEStages
// 0x0010 (0x0010 - 0x0000)
struct BPI_NPE_Guide_C_GetNPEStages final
{
public:
	TArray<class ABP_NPE_Stage_C*>                Stages;                                            // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_NPE_Guide_C_GetNPEStages) == 0x000008, "Wrong alignment on BPI_NPE_Guide_C_GetNPEStages");
static_assert(sizeof(BPI_NPE_Guide_C_GetNPEStages) == 0x000010, "Wrong size on BPI_NPE_Guide_C_GetNPEStages");
static_assert(offsetof(BPI_NPE_Guide_C_GetNPEStages, Stages) == 0x000000, "Member 'BPI_NPE_Guide_C_GetNPEStages::Stages' has a wrong offset!");

// Function BPI_NPE_Guide.BPI_NPE_Guide_C.GetObjectiveTimeRemaining
// 0x0008 (0x0008 - 0x0000)
struct BPI_NPE_Guide_C_GetObjectiveTimeRemaining final
{
public:
	double                                        TimeRemaining;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_NPE_Guide_C_GetObjectiveTimeRemaining) == 0x000008, "Wrong alignment on BPI_NPE_Guide_C_GetObjectiveTimeRemaining");
static_assert(sizeof(BPI_NPE_Guide_C_GetObjectiveTimeRemaining) == 0x000008, "Wrong size on BPI_NPE_Guide_C_GetObjectiveTimeRemaining");
static_assert(offsetof(BPI_NPE_Guide_C_GetObjectiveTimeRemaining, TimeRemaining) == 0x000000, "Member 'BPI_NPE_Guide_C_GetObjectiveTimeRemaining::TimeRemaining' has a wrong offset!");

// Function BPI_NPE_Guide.BPI_NPE_Guide_C.SetActiveNPEStage
// 0x0008 (0x0008 - 0x0000)
struct BPI_NPE_Guide_C_SetActiveNPEStage final
{
public:
	struct FGameplayTag                           ActiveStage;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_NPE_Guide_C_SetActiveNPEStage) == 0x000004, "Wrong alignment on BPI_NPE_Guide_C_SetActiveNPEStage");
static_assert(sizeof(BPI_NPE_Guide_C_SetActiveNPEStage) == 0x000008, "Wrong size on BPI_NPE_Guide_C_SetActiveNPEStage");
static_assert(offsetof(BPI_NPE_Guide_C_SetActiveNPEStage, ActiveStage) == 0x000000, "Member 'BPI_NPE_Guide_C_SetActiveNPEStage::ActiveStage' has a wrong offset!");

// Function BPI_NPE_Guide.BPI_NPE_Guide_C.SetNPEAIDirectives
// 0x000C (0x000C - 0x0000)
struct BPI_NPE_Guide_C_SetNPEAIDirectives final
{
public:
	struct FGameplayTag                           NewAIDirective;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          ClearPreviousDirectives;                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_NPE_Guide_C_SetNPEAIDirectives) == 0x000004, "Wrong alignment on BPI_NPE_Guide_C_SetNPEAIDirectives");
static_assert(sizeof(BPI_NPE_Guide_C_SetNPEAIDirectives) == 0x00000C, "Wrong size on BPI_NPE_Guide_C_SetNPEAIDirectives");
static_assert(offsetof(BPI_NPE_Guide_C_SetNPEAIDirectives, NewAIDirective) == 0x000000, "Member 'BPI_NPE_Guide_C_SetNPEAIDirectives::NewAIDirective' has a wrong offset!");
static_assert(offsetof(BPI_NPE_Guide_C_SetNPEAIDirectives, ClearPreviousDirectives) == 0x000008, "Member 'BPI_NPE_Guide_C_SetNPEAIDirectives::ClearPreviousDirectives' has a wrong offset!");

}

