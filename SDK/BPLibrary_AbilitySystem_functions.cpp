#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPLibrary_AbilitySystem

#include "Basic.hpp"

#include "BPLibrary_AbilitySystem_classes.hpp"
#include "BPLibrary_AbilitySystem_parameters.hpp"


namespace SDK
{

// Function BPLibrary_AbilitySystem.BPLibrary_AbilitySystem_C.CanEffectProcInhandItems
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FGameplayTagContainer&     Incoming_Tag                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPLibrary_AbilitySystem_C::CanEffectProcInhandItems(const struct FGameplayTagContainer& Incoming_Tag, class UObject* __WorldContext, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPLibrary_AbilitySystem_C", "CanEffectProcInhandItems");

	Params::BPLibrary_AbilitySystem_C_CanEffectProcInhandItems Parms{};

	Parms.Incoming_Tag = std::move(Incoming_Tag);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPLibrary_AbilitySystem.BPLibrary_AbilitySystem_C.CanEffectProcOffhandItems
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FGameplayTagContainer&     Incoming_Tag                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPLibrary_AbilitySystem_C::CanEffectProcOffhandItems(const struct FGameplayTagContainer& Incoming_Tag, class UObject* __WorldContext, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPLibrary_AbilitySystem_C", "CanEffectProcOffhandItems");

	Params::BPLibrary_AbilitySystem_C_CanEffectProcOffhandItems Parms{};

	Parms.Incoming_Tag = std::move(Incoming_Tag);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPLibrary_AbilitySystem.BPLibrary_AbilitySystem_C.CanProcOnActivateAbilityItems
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTagContainer&     IncomingTag                                            (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPLibrary_AbilitySystem_C::CanProcOnActivateAbilityItems(const struct FGameplayTagContainer& IncomingTag, class UObject* __WorldContext, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPLibrary_AbilitySystem_C", "CanProcOnActivateAbilityItems");

	Params::BPLibrary_AbilitySystem_C_CanProcOnActivateAbilityItems Parms{};

	Parms.IncomingTag = std::move(IncomingTag);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPLibrary_AbilitySystem.BPLibrary_AbilitySystem_C.GenericShouldNotBreakStealth
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTagContainer&     Ability_Tags                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// const struct FGameplayTagContainer&     Additional_Tags_To_Consider                            (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Should_Not_Break_Stealth                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPLibrary_AbilitySystem_C::GenericShouldNotBreakStealth(const struct FGameplayTagContainer& Ability_Tags, const struct FGameplayTagContainer& Additional_Tags_To_Consider, class UObject* __WorldContext, bool* Should_Not_Break_Stealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPLibrary_AbilitySystem_C", "GenericShouldNotBreakStealth");

	Params::BPLibrary_AbilitySystem_C_GenericShouldNotBreakStealth Parms{};

	Parms.Ability_Tags = std::move(Ability_Tags);
	Parms.Additional_Tags_To_Consider = std::move(Additional_Tags_To_Consider);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Should_Not_Break_Stealth != nullptr)
		*Should_Not_Break_Stealth = Parms.Should_Not_Break_Stealth;
}


// Function BPLibrary_AbilitySystem.BPLibrary_AbilitySystem_C.GetGlobalTimeStamp
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FDateTime*                       CurrentUTC                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPLibrary_AbilitySystem_C::GetGlobalTimeStamp(class UObject* __WorldContext, struct FDateTime* CurrentUTC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPLibrary_AbilitySystem_C", "GetGlobalTimeStamp");

	Params::BPLibrary_AbilitySystem_C_GetGlobalTimeStamp Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (CurrentUTC != nullptr)
		*CurrentUTC = std::move(Parms.CurrentUTC);
}


// Function BPLibrary_AbilitySystem.BPLibrary_AbilitySystem_C.GetItemMontage
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           AvatarActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// Enum_ItemAnimationType                  ItemAnimation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FHWMontageInfo*                  Montage                                                (Parm, OutParm, NoDestructor)

void UBPLibrary_AbilitySystem_C::GetItemMontage(class AActor* AvatarActor, Enum_ItemAnimationType ItemAnimation, class UObject* __WorldContext, struct FHWMontageInfo* Montage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPLibrary_AbilitySystem_C", "GetItemMontage");

	Params::BPLibrary_AbilitySystem_C_GetItemMontage Parms{};

	Parms.AvatarActor = AvatarActor;
	Parms.ItemAnimation = ItemAnimation;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Montage != nullptr)
		*Montage = std::move(Parms.Montage);
}

}

