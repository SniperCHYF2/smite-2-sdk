#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NPE_GuideComponent

#include "Basic.hpp"

#include "S_NPE_HUDEvent_structs.hpp"
#include "E_NPE_TriggerType_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "S_NPE_Trigger_Event_structs.hpp"
#include "Hemingway_structs.hpp"
#include "E_NPE_TutorialUIEvent_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NPE_GuideComponent.BP_NPE_GuideComponent_C
// 0x01C0 (0x0260 - 0x00A0)
class UBP_NPE_GuideComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class ABP_NPE_Stage_C*>                Stages;                                            // 0x00A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          RUN_CLIENTSIDE_ONLY;                               // 0x00B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowStagesToChangeTract;                          // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA[0x2];                                       // 0x00BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           DefaultTract;                                      // 0x00BC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWCharacter_Base*                      OwnerCharacter;                                    // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AHWPlayerState*                         OwnerPlayerState;                                  // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          HasRole;                                           // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, class UBP_NPE_Guide_Tract_C*> TractsMap;                               // 0x00E0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<ECharacterRole, struct FGameplayTag>     RoleTracts;                                        // 0x0130(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          DebugLoggingEnabled;                               // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_181[0x3];                                      // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CurrentStageTag;                                   // 0x0184(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_NPE_Stage_C*>                ActiveStages;                                      // 0x0190(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FGameplayTag                           CurrentTractTag;                                   // 0x01A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(const struct FGameplayTag& StageTag, E_NPE_TriggerType Event)> OnNPEGuideStageStarted; // 0x01A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(const struct FGameplayTag& StageTag, E_NPE_TriggerType Event)> OnNPEGuideStageEnded; // 0x01B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          GuideInProgress;                                   // 0x01C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowTractRestarts;                                // 0x01C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CA[0x6];                                      // 0x01CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(TArray<struct FS_NPE_HUDEvent>& HUDEvents)> OnNPEGuideHUDEvent;    // 0x01D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FTimerHandle                           MatchPhaseTimer;                                   // 0x01E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(E_NPE_TutorialUIEvent EventType)> OnNPEGuideTutorialUIEvent;       // 0x01E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(const struct FGameplayTag& CustomTag, E_NPE_TriggerType Event, TArray<struct FS_NPE_Trigger_Event>& Events)> OnNPEGuideCustomTrigger; // 0x01F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class UBP_NPE_Guide_Tract_C*>          TractStack;                                        // 0x0208(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Auto_Start_Phases;                                 // 0x0218(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        DebugTimer;                                        // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_NPE_Guide_C*                        Guide;                                             // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_NPE_TutorialQuestTracker_C*         QuestTracker;                                      // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class ABP_NPE_TutorialQuestTracker_C* QuestTracker)> OnNPEGuideQuestTrackerUpdated; // 0x0250(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void BindNPEStageEvents(class ABP_NPE_Stage_C* Stage, bool Unbind);
	void BindPlayerStateEvents(class AHWPlayerState* PlayerState, bool Unbind);
	bool CanRestart();
	void Cleanup();
	void CustomEvent();
	void DebugLog(const class FString& Log, bool IsError, bool SuppressThis);
	void ExecuteUbergraph_BP_NPE_GuideComponent(int32 EntryPoint);
	void GatherNPEStages();
	void Get_Stage_Config(const struct FGameplayTag& StageTag, class UBP_NPE_Guide_Tract_C* Tract, struct FS_NPE_Guide_StageConfig* StageConfig);
	void GetCurrentTract(class UBP_NPE_Guide_Tract_C** Tract);
	void GetNextStageTag(const struct FGameplayTag& CurrentStageTag_0, class UBP_NPE_Guide_Tract_C* Tract, struct FGameplayTag* NextStageTag);
	void GetStage(const struct FGameplayTag& StageTag, class ABP_NPE_Stage_C** Stage);
	void HasAuthorityOrIsClientsideMode(bool* Ok);
	void InitializeNPEGuide(ECharacterRole Role);
	void NPEGuideAbort();
	void NPEGuideAbortTract(class UBP_NPE_Guide_Tract_C* Tract);
	void NPEGuideAdvanceToNextStage(const struct FGameplayTag& NextStageTag);
	void NPEGuideBeginTract();
	void NPEGuideRestart(const struct FGameplayTag& SkipToStage, ECharacterRole Role);
	void NPEGuideTriggerStage(const struct FGameplayTag& StageTag, bool IsBackgroundStage);
	void OnCharacterPlayerStateChanged(class AHWCharacter_Base* OwnerCharacter_0, class AHWPlayerState* NewPlayerState);
	void OnGameStateGamePhaseStarted(const struct FGameplayTag& NewPhase);
	void OnNPEStageCustomTrigger(const struct FGameplayTag& CustomTag, TArray<struct FS_NPE_Trigger_Event>& Events);
	void OnNPEStageEnded(bool WasFailure, const struct FGameplayTag& NewTract, class ABP_NPE_Stage_C* Instigator, int32 StageDepth);
	void OnNPEStageHUDEvent(bool bShow, const struct FGameplayTagContainer& HUDElementTags);
	void OnNPEStageStarted(const struct FGameplayTag& StageTag);
	void OnPlayerStateAbilitySystemActorChanged(class AHWPlayerState* PlayerState, class AHWCharacterAbilitySystemActor* NewASActor);
	void OnPlayerStateAssignedRoleChanged(ECharacterRole AssignedRole);
	void OnPlayerStateClientLoadStateChanged();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void SetTractByAssignedRole(ECharacterRole Role);
	void TriggerMatchPhaseChange();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NPE_GuideComponent_C">();
	}
	static class UBP_NPE_GuideComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_NPE_GuideComponent_C>();
	}
};
static_assert(alignof(UBP_NPE_GuideComponent_C) == 0x000008, "Wrong alignment on UBP_NPE_GuideComponent_C");
static_assert(sizeof(UBP_NPE_GuideComponent_C) == 0x000260, "Wrong size on UBP_NPE_GuideComponent_C");
static_assert(offsetof(UBP_NPE_GuideComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_NPE_GuideComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_NPE_GuideComponent_C, Stages) == 0x0000A8, "Member 'UBP_NPE_GuideComponent_C::Stages' has a wrong offset!");
static_assert(offsetof(UBP_NPE_GuideComponent_C, RUN_CLIENTSIDE_ONLY) == 0x0000B8, "Member 'UBP_NPE_GuideComponent_C::RUN_CLIENTSIDE_ONLY' has a wrong offset!");
static_assert(offsetof(UBP_NPE_GuideComponent_C, AllowStagesToChangeTract) == 0x0000B9, "Member 'UBP_NPE_GuideComponent_C::AllowStagesToChangeTract' has a wrong offset!");
static_assert(offsetof(UBP_NPE_GuideComponent_C, DefaultTract) == 0x0000BC, "Member 'UBP_NPE_GuideComponent_C::DefaultTract' has a wrong offset!");
static_assert(offsetof(UBP_NPE_GuideComponent_C, OwnerCharacter) == 0x0000C8, "Member 'UBP_NPE_GuideComponent_C::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(UBP_NPE_GuideComponent_C, OwnerPlayerState) == 0x0000D0, "Member 'UBP_NPE_GuideComponent_C::OwnerPlayerState' has a wrong offset!");
static_assert(offsetof(UBP_NPE_GuideComponent_C, HasRole) == 0x0000D8, "Member 'UBP_NPE_GuideComponent_C::HasRole' has a wrong offset!");
static_assert(offsetof(UBP_NPE_GuideComponent_C, TractsMap) == 0x0000E0, "Member 'UBP_NPE_GuideComponent_C::TractsMap' has a wrong offset!");
static_assert(offsetof(UBP_NPE_GuideComponent_C, RoleTracts) == 0x000130, "Member 'UBP_NPE_GuideComponent_C::RoleTracts' has a wrong offset!");
static_assert(offsetof(UBP_NPE_GuideComponent_C, DebugLoggingEnabled) == 0x000180, "Member 'UBP_NPE_GuideComponent_C::DebugLoggingEnabled' has a wrong offset!");
static_assert(offsetof(UBP_NPE_GuideComponent_C, CurrentStageTag) == 0x000184, "Member 'UBP_NPE_GuideComponent_C::CurrentStageTag' has a wrong offset!");
static_assert(offsetof(UBP_NPE_GuideComponent_C, ActiveStages) == 0x000190, "Member 'UBP_NPE_GuideComponent_C::ActiveStages' has a wrong offset!");
static_assert(offsetof(UBP_NPE_GuideComponent_C, CurrentTractTag) == 0x0001A0, "Member 'UBP_NPE_GuideComponent_C::CurrentTractTag' has a wrong offset!");
static_assert(offsetof(UBP_NPE_GuideComponent_C, OnNPEGuideStageStarted) == 0x0001A8, "Member 'UBP_NPE_GuideComponent_C::OnNPEGuideStageStarted' has a wrong offset!");
static_assert(offsetof(UBP_NPE_GuideComponent_C, OnNPEGuideStageEnded) == 0x0001B8, "Member 'UBP_NPE_GuideComponent_C::OnNPEGuideStageEnded' has a wrong offset!");
static_assert(offsetof(UBP_NPE_GuideComponent_C, GuideInProgress) == 0x0001C8, "Member 'UBP_NPE_GuideComponent_C::GuideInProgress' has a wrong offset!");
static_assert(offsetof(UBP_NPE_GuideComponent_C, AllowTractRestarts) == 0x0001C9, "Member 'UBP_NPE_GuideComponent_C::AllowTractRestarts' has a wrong offset!");
static_assert(offsetof(UBP_NPE_GuideComponent_C, OnNPEGuideHUDEvent) == 0x0001D0, "Member 'UBP_NPE_GuideComponent_C::OnNPEGuideHUDEvent' has a wrong offset!");
static_assert(offsetof(UBP_NPE_GuideComponent_C, MatchPhaseTimer) == 0x0001E0, "Member 'UBP_NPE_GuideComponent_C::MatchPhaseTimer' has a wrong offset!");
static_assert(offsetof(UBP_NPE_GuideComponent_C, OnNPEGuideTutorialUIEvent) == 0x0001E8, "Member 'UBP_NPE_GuideComponent_C::OnNPEGuideTutorialUIEvent' has a wrong offset!");
static_assert(offsetof(UBP_NPE_GuideComponent_C, OnNPEGuideCustomTrigger) == 0x0001F8, "Member 'UBP_NPE_GuideComponent_C::OnNPEGuideCustomTrigger' has a wrong offset!");
static_assert(offsetof(UBP_NPE_GuideComponent_C, TractStack) == 0x000208, "Member 'UBP_NPE_GuideComponent_C::TractStack' has a wrong offset!");
static_assert(offsetof(UBP_NPE_GuideComponent_C, Auto_Start_Phases) == 0x000218, "Member 'UBP_NPE_GuideComponent_C::Auto_Start_Phases' has a wrong offset!");
static_assert(offsetof(UBP_NPE_GuideComponent_C, DebugTimer) == 0x000238, "Member 'UBP_NPE_GuideComponent_C::DebugTimer' has a wrong offset!");
static_assert(offsetof(UBP_NPE_GuideComponent_C, Guide) == 0x000240, "Member 'UBP_NPE_GuideComponent_C::Guide' has a wrong offset!");
static_assert(offsetof(UBP_NPE_GuideComponent_C, QuestTracker) == 0x000248, "Member 'UBP_NPE_GuideComponent_C::QuestTracker' has a wrong offset!");
static_assert(offsetof(UBP_NPE_GuideComponent_C, OnNPEGuideQuestTrackerUpdated) == 0x000250, "Member 'UBP_NPE_GuideComponent_C::OnNPEGuideQuestTrackerUpdated' has a wrong offset!");

}

