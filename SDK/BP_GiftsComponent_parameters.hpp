#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GiftsComponent

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"
#include "Hemingway_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function BP_GiftsComponent.BP_GiftsComponent_C.BindToGameModeEvent
// 0x0068 (0x0068 - 0x0000)
struct BP_GiftsComponent_C_BindToGameModeEvent final
{
public:
	TDelegate<void(int32 Count)>                  K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(int32 Count)>                  K2Node_CreateDelegate_OutputDelegate_1;            // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHWGameState*                           CallFunc_GetHWGameState_ReturnValue;               // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHWGameState_Arena*                     K2Node_DynamicCast_AsHWGame_State_Arena;           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FGameplayTag& PhaseTag, float PhaseStartTime, float PhaseDuration)> K2Node_CreateDelegate_OutputDelegate_2; // 0x0034(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWGameState*                           CallFunc_GetHWGameState_ReturnValue_1;             // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHWGameState*                           CallFunc_GetHWGameState_ReturnValue_2;             // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_GetCurrentGamePhaseTag_ReturnValue;       // 0x0058(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue;       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue_1;     // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GiftsComponent_C_BindToGameModeEvent) == 0x000008, "Wrong alignment on BP_GiftsComponent_C_BindToGameModeEvent");
static_assert(sizeof(BP_GiftsComponent_C_BindToGameModeEvent) == 0x000068, "Wrong size on BP_GiftsComponent_C_BindToGameModeEvent");
static_assert(offsetof(BP_GiftsComponent_C_BindToGameModeEvent, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'BP_GiftsComponent_C_BindToGameModeEvent::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_BindToGameModeEvent, K2Node_CreateDelegate_OutputDelegate_1) == 0x000010, "Member 'BP_GiftsComponent_C_BindToGameModeEvent::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_BindToGameModeEvent, CallFunc_GetHWGameState_ReturnValue) == 0x000020, "Member 'BP_GiftsComponent_C_BindToGameModeEvent::CallFunc_GetHWGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_BindToGameModeEvent, K2Node_DynamicCast_AsHWGame_State_Arena) == 0x000028, "Member 'BP_GiftsComponent_C_BindToGameModeEvent::K2Node_DynamicCast_AsHWGame_State_Arena' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_BindToGameModeEvent, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_GiftsComponent_C_BindToGameModeEvent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_BindToGameModeEvent, K2Node_CreateDelegate_OutputDelegate_2) == 0x000034, "Member 'BP_GiftsComponent_C_BindToGameModeEvent::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_BindToGameModeEvent, CallFunc_GetHWGameState_ReturnValue_1) == 0x000048, "Member 'BP_GiftsComponent_C_BindToGameModeEvent::CallFunc_GetHWGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_BindToGameModeEvent, CallFunc_GetHWGameState_ReturnValue_2) == 0x000050, "Member 'BP_GiftsComponent_C_BindToGameModeEvent::CallFunc_GetHWGameState_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_BindToGameModeEvent, CallFunc_GetCurrentGamePhaseTag_ReturnValue) == 0x000058, "Member 'BP_GiftsComponent_C_BindToGameModeEvent::CallFunc_GetCurrentGamePhaseTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_BindToGameModeEvent, CallFunc_EqualEqual_GameplayTag_ReturnValue) == 0x000060, "Member 'BP_GiftsComponent_C_BindToGameModeEvent::CallFunc_EqualEqual_GameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_BindToGameModeEvent, CallFunc_EqualEqual_GameplayTag_ReturnValue_1) == 0x000061, "Member 'BP_GiftsComponent_C_BindToGameModeEvent::CallFunc_EqualEqual_GameplayTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_BindToGameModeEvent, CallFunc_BooleanOR_ReturnValue) == 0x000062, "Member 'BP_GiftsComponent_C_BindToGameModeEvent::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_GiftsComponent.BP_GiftsComponent_C.BindToPlayerDeaths
// 0x0040 (0x0040 - 0x0000)
struct BP_GiftsComponent_C_BindToPlayerDeaths final
{
public:
	struct FGenericTeamId                         K2Node_MakeStruct_GenericTeamId;                   // 0x0000(0x0001)(NoDestructor, HasGetValueTypeHash)
	struct FGenericTeamId                         K2Node_MakeStruct_GenericTeamId_1;                 // 0x0001(0x0001)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWTeamState*                           CallFunc_GetTeamState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHWTeamState*                           CallFunc_GetTeamState_ReturnValue_1;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AHWTeamState* Team, class AHWPlayerState* TeamMember, const struct FDamageEventData& DeathEventData)> K2Node_CreateDelegate_OutputDelegate; // 0x001C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AHWTeamState* Team, class AHWPlayerState* TeamMember, const struct FDamageEventData& DeathEventData)> K2Node_CreateDelegate_OutputDelegate_1; // 0x002C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GiftsComponent_C_BindToPlayerDeaths) == 0x000008, "Wrong alignment on BP_GiftsComponent_C_BindToPlayerDeaths");
static_assert(sizeof(BP_GiftsComponent_C_BindToPlayerDeaths) == 0x000040, "Wrong size on BP_GiftsComponent_C_BindToPlayerDeaths");
static_assert(offsetof(BP_GiftsComponent_C_BindToPlayerDeaths, K2Node_MakeStruct_GenericTeamId) == 0x000000, "Member 'BP_GiftsComponent_C_BindToPlayerDeaths::K2Node_MakeStruct_GenericTeamId' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_BindToPlayerDeaths, K2Node_MakeStruct_GenericTeamId_1) == 0x000001, "Member 'BP_GiftsComponent_C_BindToPlayerDeaths::K2Node_MakeStruct_GenericTeamId_1' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_BindToPlayerDeaths, CallFunc_GetTeamState_ReturnValue) == 0x000008, "Member 'BP_GiftsComponent_C_BindToPlayerDeaths::CallFunc_GetTeamState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_BindToPlayerDeaths, CallFunc_GetTeamState_ReturnValue_1) == 0x000010, "Member 'BP_GiftsComponent_C_BindToPlayerDeaths::CallFunc_GetTeamState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_BindToPlayerDeaths, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_GiftsComponent_C_BindToPlayerDeaths::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_BindToPlayerDeaths, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'BP_GiftsComponent_C_BindToPlayerDeaths::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_BindToPlayerDeaths, K2Node_CreateDelegate_OutputDelegate) == 0x00001C, "Member 'BP_GiftsComponent_C_BindToPlayerDeaths::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_BindToPlayerDeaths, K2Node_CreateDelegate_OutputDelegate_1) == 0x00002C, "Member 'BP_GiftsComponent_C_BindToPlayerDeaths::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

// Function BP_GiftsComponent.BP_GiftsComponent_C.ChaosTicketsUpdated
// 0x0060 (0x0060 - 0x0000)
struct BP_GiftsComponent_C_ChaosTicketsUpdated final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGenericTeamId                         K2Node_MakeStruct_GenericTeamId;                   // 0x0014(0x0001)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWTeamState*                           CallFunc_GetTeamState_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AHWPlayerState*>                 CallFunc_GetTeamMembers_ReturnValue;               // 0x0028(0x0010)(ReferenceParm)
	class AHWPlayerState*                         CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilitySystemComponent*              CallFunc_GetHWAbilitySystemComponent_ReturnValue;  // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue; // 0x0054(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GiftsComponent_C_ChaosTicketsUpdated) == 0x000008, "Wrong alignment on BP_GiftsComponent_C_ChaosTicketsUpdated");
static_assert(sizeof(BP_GiftsComponent_C_ChaosTicketsUpdated) == 0x000060, "Wrong size on BP_GiftsComponent_C_ChaosTicketsUpdated");
static_assert(offsetof(BP_GiftsComponent_C_ChaosTicketsUpdated, Count) == 0x000000, "Member 'BP_GiftsComponent_C_ChaosTicketsUpdated::Count' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_ChaosTicketsUpdated, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000004, "Member 'BP_GiftsComponent_C_ChaosTicketsUpdated::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_ChaosTicketsUpdated, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_GiftsComponent_C_ChaosTicketsUpdated::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_ChaosTicketsUpdated, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_GiftsComponent_C_ChaosTicketsUpdated::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_ChaosTicketsUpdated, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_GiftsComponent_C_ChaosTicketsUpdated::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_ChaosTicketsUpdated, K2Node_MakeStruct_GenericTeamId) == 0x000014, "Member 'BP_GiftsComponent_C_ChaosTicketsUpdated::K2Node_MakeStruct_GenericTeamId' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_ChaosTicketsUpdated, CallFunc_Not_PreBool_ReturnValue) == 0x000015, "Member 'BP_GiftsComponent_C_ChaosTicketsUpdated::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_ChaosTicketsUpdated, CallFunc_GetTeamState_ReturnValue) == 0x000018, "Member 'BP_GiftsComponent_C_ChaosTicketsUpdated::CallFunc_GetTeamState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_ChaosTicketsUpdated, CallFunc_BooleanAND_ReturnValue) == 0x000020, "Member 'BP_GiftsComponent_C_ChaosTicketsUpdated::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_ChaosTicketsUpdated, CallFunc_GetTeamMembers_ReturnValue) == 0x000028, "Member 'BP_GiftsComponent_C_ChaosTicketsUpdated::CallFunc_GetTeamMembers_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_ChaosTicketsUpdated, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_GiftsComponent_C_ChaosTicketsUpdated::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_ChaosTicketsUpdated, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BP_GiftsComponent_C_ChaosTicketsUpdated::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_ChaosTicketsUpdated, CallFunc_GetHWAbilitySystemComponent_ReturnValue) == 0x000048, "Member 'BP_GiftsComponent_C_ChaosTicketsUpdated::CallFunc_GetHWAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_ChaosTicketsUpdated, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'BP_GiftsComponent_C_ChaosTicketsUpdated::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_ChaosTicketsUpdated, CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue) == 0x000054, "Member 'BP_GiftsComponent_C_ChaosTicketsUpdated::CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue' has a wrong offset!");

// Function BP_GiftsComponent.BP_GiftsComponent_C.ExecuteUbergraph_BP_GiftsComponent
// 0x0004 (0x0004 - 0x0000)
struct BP_GiftsComponent_C_ExecuteUbergraph_BP_GiftsComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GiftsComponent_C_ExecuteUbergraph_BP_GiftsComponent) == 0x000004, "Wrong alignment on BP_GiftsComponent_C_ExecuteUbergraph_BP_GiftsComponent");
static_assert(sizeof(BP_GiftsComponent_C_ExecuteUbergraph_BP_GiftsComponent) == 0x000004, "Wrong size on BP_GiftsComponent_C_ExecuteUbergraph_BP_GiftsComponent");
static_assert(offsetof(BP_GiftsComponent_C_ExecuteUbergraph_BP_GiftsComponent, EntryPoint) == 0x000000, "Member 'BP_GiftsComponent_C_ExecuteUbergraph_BP_GiftsComponent::EntryPoint' has a wrong offset!");

// Function BP_GiftsComponent.BP_GiftsComponent_C.GamePhaseChanged
// 0x0014 (0x0014 - 0x0000)
struct BP_GiftsComponent_C_GamePhaseChanged final
{
public:
	struct FGameplayTag                           PhaseTag;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	float                                         PhaseStartTime;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhaseDuration;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess;   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GiftsComponent_C_GamePhaseChanged) == 0x000004, "Wrong alignment on BP_GiftsComponent_C_GamePhaseChanged");
static_assert(sizeof(BP_GiftsComponent_C_GamePhaseChanged) == 0x000014, "Wrong size on BP_GiftsComponent_C_GamePhaseChanged");
static_assert(offsetof(BP_GiftsComponent_C_GamePhaseChanged, PhaseTag) == 0x000000, "Member 'BP_GiftsComponent_C_GamePhaseChanged::PhaseTag' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_GamePhaseChanged, PhaseStartTime) == 0x000008, "Member 'BP_GiftsComponent_C_GamePhaseChanged::PhaseStartTime' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_GamePhaseChanged, PhaseDuration) == 0x00000C, "Member 'BP_GiftsComponent_C_GamePhaseChanged::PhaseDuration' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_GamePhaseChanged, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess) == 0x000010, "Member 'BP_GiftsComponent_C_GamePhaseChanged::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess' has a wrong offset!");

// Function BP_GiftsComponent.BP_GiftsComponent_C.GatherFavorZones
// 0x0060 (0x0060 - 0x0000)
struct BP_GiftsComponent_C_GatherFavorZones final
{
public:
	class ABP_Gifts_C*                            LocalZone;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_Gifts_C*>                    LocalGiftZones;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Gifts_C*                            CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_Gifts_C*>                    CallFunc_GetAllActorsOfClass_OutActors;            // 0x0048(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GiftsComponent_C_GatherFavorZones) == 0x000008, "Wrong alignment on BP_GiftsComponent_C_GatherFavorZones");
static_assert(sizeof(BP_GiftsComponent_C_GatherFavorZones) == 0x000060, "Wrong size on BP_GiftsComponent_C_GatherFavorZones");
static_assert(offsetof(BP_GiftsComponent_C_GatherFavorZones, LocalZone) == 0x000000, "Member 'BP_GiftsComponent_C_GatherFavorZones::LocalZone' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_GatherFavorZones, LocalGiftZones) == 0x000008, "Member 'BP_GiftsComponent_C_GatherFavorZones::LocalGiftZones' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_GatherFavorZones, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'BP_GiftsComponent_C_GatherFavorZones::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_GatherFavorZones, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'BP_GiftsComponent_C_GatherFavorZones::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_GatherFavorZones, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'BP_GiftsComponent_C_GatherFavorZones::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_GatherFavorZones, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_GiftsComponent_C_GatherFavorZones::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_GatherFavorZones, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_GiftsComponent_C_GatherFavorZones::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_GatherFavorZones, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'BP_GiftsComponent_C_GatherFavorZones::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_GatherFavorZones, K2Node_SwitchInteger_CmpSuccess) == 0x000038, "Member 'BP_GiftsComponent_C_GatherFavorZones::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_GatherFavorZones, CallFunc_Array_Add_ReturnValue) == 0x00003C, "Member 'BP_GiftsComponent_C_GatherFavorZones::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_GatherFavorZones, CallFunc_Array_Add_ReturnValue_1) == 0x000040, "Member 'BP_GiftsComponent_C_GatherFavorZones::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_GatherFavorZones, CallFunc_GetAllActorsOfClass_OutActors) == 0x000048, "Member 'BP_GiftsComponent_C_GatherFavorZones::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_GatherFavorZones, CallFunc_Array_Add_ReturnValue_2) == 0x000058, "Member 'BP_GiftsComponent_C_GatherFavorZones::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");

// Function BP_GiftsComponent.BP_GiftsComponent_C.GetRandomZone
// 0x0030 (0x0030 - 0x0000)
struct BP_GiftsComponent_C_GetRandomZone final
{
public:
	TArray<class ABP_Gifts_C*>                    Array;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class ABP_Gifts_C*                            Output;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_Gifts_C*>                    LocalArray;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class ABP_Gifts_C*                            CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GiftsComponent_C_GetRandomZone) == 0x000008, "Wrong alignment on BP_GiftsComponent_C_GetRandomZone");
static_assert(sizeof(BP_GiftsComponent_C_GetRandomZone) == 0x000030, "Wrong size on BP_GiftsComponent_C_GetRandomZone");
static_assert(offsetof(BP_GiftsComponent_C_GetRandomZone, Array) == 0x000000, "Member 'BP_GiftsComponent_C_GetRandomZone::Array' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_GetRandomZone, Output) == 0x000010, "Member 'BP_GiftsComponent_C_GetRandomZone::Output' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_GetRandomZone, LocalArray) == 0x000018, "Member 'BP_GiftsComponent_C_GetRandomZone::LocalArray' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_GetRandomZone, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_GiftsComponent_C_GetRandomZone::CallFunc_Array_Get_Item' has a wrong offset!");

// Function BP_GiftsComponent.BP_GiftsComponent_C.OrderTicketsUpdated
// 0x0060 (0x0060 - 0x0000)
struct BP_GiftsComponent_C_OrderTicketsUpdated final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGenericTeamId                         K2Node_MakeStruct_GenericTeamId;                   // 0x0014(0x0001)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWTeamState*                           CallFunc_GetTeamState_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AHWPlayerState*>                 CallFunc_GetTeamMembers_ReturnValue;               // 0x0028(0x0010)(ReferenceParm)
	class AHWPlayerState*                         CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilitySystemComponent*              CallFunc_GetHWAbilitySystemComponent_ReturnValue;  // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue; // 0x0054(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GiftsComponent_C_OrderTicketsUpdated) == 0x000008, "Wrong alignment on BP_GiftsComponent_C_OrderTicketsUpdated");
static_assert(sizeof(BP_GiftsComponent_C_OrderTicketsUpdated) == 0x000060, "Wrong size on BP_GiftsComponent_C_OrderTicketsUpdated");
static_assert(offsetof(BP_GiftsComponent_C_OrderTicketsUpdated, Count) == 0x000000, "Member 'BP_GiftsComponent_C_OrderTicketsUpdated::Count' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_OrderTicketsUpdated, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000004, "Member 'BP_GiftsComponent_C_OrderTicketsUpdated::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_OrderTicketsUpdated, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_GiftsComponent_C_OrderTicketsUpdated::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_OrderTicketsUpdated, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_GiftsComponent_C_OrderTicketsUpdated::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_OrderTicketsUpdated, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_GiftsComponent_C_OrderTicketsUpdated::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_OrderTicketsUpdated, K2Node_MakeStruct_GenericTeamId) == 0x000014, "Member 'BP_GiftsComponent_C_OrderTicketsUpdated::K2Node_MakeStruct_GenericTeamId' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_OrderTicketsUpdated, CallFunc_Not_PreBool_ReturnValue) == 0x000015, "Member 'BP_GiftsComponent_C_OrderTicketsUpdated::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_OrderTicketsUpdated, CallFunc_GetTeamState_ReturnValue) == 0x000018, "Member 'BP_GiftsComponent_C_OrderTicketsUpdated::CallFunc_GetTeamState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_OrderTicketsUpdated, CallFunc_BooleanAND_ReturnValue) == 0x000020, "Member 'BP_GiftsComponent_C_OrderTicketsUpdated::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_OrderTicketsUpdated, CallFunc_GetTeamMembers_ReturnValue) == 0x000028, "Member 'BP_GiftsComponent_C_OrderTicketsUpdated::CallFunc_GetTeamMembers_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_OrderTicketsUpdated, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_GiftsComponent_C_OrderTicketsUpdated::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_OrderTicketsUpdated, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BP_GiftsComponent_C_OrderTicketsUpdated::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_OrderTicketsUpdated, CallFunc_GetHWAbilitySystemComponent_ReturnValue) == 0x000048, "Member 'BP_GiftsComponent_C_OrderTicketsUpdated::CallFunc_GetHWAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_OrderTicketsUpdated, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'BP_GiftsComponent_C_OrderTicketsUpdated::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_OrderTicketsUpdated, CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue) == 0x000054, "Member 'BP_GiftsComponent_C_OrderTicketsUpdated::CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue' has a wrong offset!");

// Function BP_GiftsComponent.BP_GiftsComponent_C.PlayerDied
// 0x00C0 (0x00C0 - 0x0000)
struct BP_GiftsComponent_C_PlayerDied final
{
public:
	class AHWTeamState*                           Team;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHWPlayerState*                         TeamMember;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDamageEventData                       DeathEventData;                                    // 0x0010(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
	class AHWGameState*                           CallFunc_GetHWGameState_ReturnValue;               // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_GetCurrentGamePhaseTag_ReturnValue;       // 0x0088(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue;       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue; // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue_1; // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast;     // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GiftsComponent_C_PlayerDied) == 0x000008, "Wrong alignment on BP_GiftsComponent_C_PlayerDied");
static_assert(sizeof(BP_GiftsComponent_C_PlayerDied) == 0x0000C0, "Wrong size on BP_GiftsComponent_C_PlayerDied");
static_assert(offsetof(BP_GiftsComponent_C_PlayerDied, Team) == 0x000000, "Member 'BP_GiftsComponent_C_PlayerDied::Team' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_PlayerDied, TeamMember) == 0x000008, "Member 'BP_GiftsComponent_C_PlayerDied::TeamMember' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_PlayerDied, DeathEventData) == 0x000010, "Member 'BP_GiftsComponent_C_PlayerDied::DeathEventData' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_PlayerDied, CallFunc_GetHWGameState_ReturnValue) == 0x000080, "Member 'BP_GiftsComponent_C_PlayerDied::CallFunc_GetHWGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_PlayerDied, CallFunc_GetCurrentGamePhaseTag_ReturnValue) == 0x000088, "Member 'BP_GiftsComponent_C_PlayerDied::CallFunc_GetCurrentGamePhaseTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_PlayerDied, CallFunc_EqualEqual_GameplayTag_ReturnValue) == 0x000090, "Member 'BP_GiftsComponent_C_PlayerDied::CallFunc_EqualEqual_GameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_PlayerDied, CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue) == 0x000094, "Member 'BP_GiftsComponent_C_PlayerDied::CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_PlayerDied, CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue_1) == 0x000098, "Member 'BP_GiftsComponent_C_PlayerDied::CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_PlayerDied, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0000A0, "Member 'BP_GiftsComponent_C_PlayerDied::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_PlayerDied, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000A8, "Member 'BP_GiftsComponent_C_PlayerDied::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_PlayerDied, CallFunc_Subtract_DoubleDouble_A_ImplicitCast) == 0x0000B0, "Member 'BP_GiftsComponent_C_PlayerDied::CallFunc_Subtract_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_PlayerDied, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x0000B8, "Member 'BP_GiftsComponent_C_PlayerDied::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_GiftsComponent.BP_GiftsComponent_C.ReduceFavorTimer
// 0x0020 (0x0020 - 0x0000)
struct BP_GiftsComponent_C_ReduceFavorTimer final
{
public:
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast;     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_NeutralFavorInterval_ImplicitCast; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GiftsComponent_C_ReduceFavorTimer) == 0x000008, "Wrong alignment on BP_GiftsComponent_C_ReduceFavorTimer");
static_assert(sizeof(BP_GiftsComponent_C_ReduceFavorTimer) == 0x000020, "Wrong size on BP_GiftsComponent_C_ReduceFavorTimer");
static_assert(offsetof(BP_GiftsComponent_C_ReduceFavorTimer, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000000, "Member 'BP_GiftsComponent_C_ReduceFavorTimer::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_ReduceFavorTimer, CallFunc_FClamp_ReturnValue) == 0x000008, "Member 'BP_GiftsComponent_C_ReduceFavorTimer::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_ReduceFavorTimer, CallFunc_Subtract_DoubleDouble_A_ImplicitCast) == 0x000010, "Member 'BP_GiftsComponent_C_ReduceFavorTimer::CallFunc_Subtract_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_ReduceFavorTimer, K2Node_VariableSet_NeutralFavorInterval_ImplicitCast) == 0x000018, "Member 'BP_GiftsComponent_C_ReduceFavorTimer::K2Node_VariableSet_NeutralFavorInterval_ImplicitCast' has a wrong offset!");

// Function BP_GiftsComponent.BP_GiftsComponent_C.SpawnChaosFavor
// 0x0008 (0x0008 - 0x0000)
struct BP_GiftsComponent_C_SpawnChaosFavor final
{
public:
	class ABP_Gifts_C*                            CallFunc_GetRandomZone_Output;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GiftsComponent_C_SpawnChaosFavor) == 0x000008, "Wrong alignment on BP_GiftsComponent_C_SpawnChaosFavor");
static_assert(sizeof(BP_GiftsComponent_C_SpawnChaosFavor) == 0x000008, "Wrong size on BP_GiftsComponent_C_SpawnChaosFavor");
static_assert(offsetof(BP_GiftsComponent_C_SpawnChaosFavor, CallFunc_GetRandomZone_Output) == 0x000000, "Member 'BP_GiftsComponent_C_SpawnChaosFavor::CallFunc_GetRandomZone_Output' has a wrong offset!");

// Function BP_GiftsComponent.BP_GiftsComponent_C.SpawnNeutralFavor
// 0x0008 (0x0008 - 0x0000)
struct BP_GiftsComponent_C_SpawnNeutralFavor final
{
public:
	class ABP_Gifts_C*                            CallFunc_GetRandomZone_Output;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GiftsComponent_C_SpawnNeutralFavor) == 0x000008, "Wrong alignment on BP_GiftsComponent_C_SpawnNeutralFavor");
static_assert(sizeof(BP_GiftsComponent_C_SpawnNeutralFavor) == 0x000008, "Wrong size on BP_GiftsComponent_C_SpawnNeutralFavor");
static_assert(offsetof(BP_GiftsComponent_C_SpawnNeutralFavor, CallFunc_GetRandomZone_Output) == 0x000000, "Member 'BP_GiftsComponent_C_SpawnNeutralFavor::CallFunc_GetRandomZone_Output' has a wrong offset!");

// Function BP_GiftsComponent.BP_GiftsComponent_C.SpawnOrderFavor
// 0x0008 (0x0008 - 0x0000)
struct BP_GiftsComponent_C_SpawnOrderFavor final
{
public:
	class ABP_Gifts_C*                            CallFunc_GetRandomZone_Output;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GiftsComponent_C_SpawnOrderFavor) == 0x000008, "Wrong alignment on BP_GiftsComponent_C_SpawnOrderFavor");
static_assert(sizeof(BP_GiftsComponent_C_SpawnOrderFavor) == 0x000008, "Wrong size on BP_GiftsComponent_C_SpawnOrderFavor");
static_assert(offsetof(BP_GiftsComponent_C_SpawnOrderFavor, CallFunc_GetRandomZone_Output) == 0x000000, "Member 'BP_GiftsComponent_C_SpawnOrderFavor::CallFunc_GetRandomZone_Output' has a wrong offset!");

// Function BP_GiftsComponent.BP_GiftsComponent_C.StartChaosTimer
// 0x0038 (0x0038 - 0x0000)
struct BP_GiftsComponent_C_StartChaosTimer final
{
public:
	bool                                          OverrideTimer;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        OverrideTime;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Option_1_ImplicitCast;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GiftsComponent_C_StartChaosTimer) == 0x000008, "Wrong alignment on BP_GiftsComponent_C_StartChaosTimer");
static_assert(sizeof(BP_GiftsComponent_C_StartChaosTimer) == 0x000038, "Wrong size on BP_GiftsComponent_C_StartChaosTimer");
static_assert(offsetof(BP_GiftsComponent_C_StartChaosTimer, OverrideTimer) == 0x000000, "Member 'BP_GiftsComponent_C_StartChaosTimer::OverrideTimer' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_StartChaosTimer, OverrideTime) == 0x000008, "Member 'BP_GiftsComponent_C_StartChaosTimer::OverrideTime' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_StartChaosTimer, Temp_bool_Variable) == 0x000010, "Member 'BP_GiftsComponent_C_StartChaosTimer::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_StartChaosTimer, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'BP_GiftsComponent_C_StartChaosTimer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_StartChaosTimer, K2Node_Select_Default) == 0x000024, "Member 'BP_GiftsComponent_C_StartChaosTimer::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_StartChaosTimer, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000028, "Member 'BP_GiftsComponent_C_StartChaosTimer::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_StartChaosTimer, K2Node_Select_Option_1_ImplicitCast) == 0x000030, "Member 'BP_GiftsComponent_C_StartChaosTimer::K2Node_Select_Option_1_ImplicitCast' has a wrong offset!");

// Function BP_GiftsComponent.BP_GiftsComponent_C.StartNeutralTimer
// 0x0038 (0x0038 - 0x0000)
struct BP_GiftsComponent_C_StartNeutralTimer final
{
public:
	bool                                          OverrideTimer;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        OverrideTime;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Option_1_ImplicitCast;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GiftsComponent_C_StartNeutralTimer) == 0x000008, "Wrong alignment on BP_GiftsComponent_C_StartNeutralTimer");
static_assert(sizeof(BP_GiftsComponent_C_StartNeutralTimer) == 0x000038, "Wrong size on BP_GiftsComponent_C_StartNeutralTimer");
static_assert(offsetof(BP_GiftsComponent_C_StartNeutralTimer, OverrideTimer) == 0x000000, "Member 'BP_GiftsComponent_C_StartNeutralTimer::OverrideTimer' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_StartNeutralTimer, OverrideTime) == 0x000008, "Member 'BP_GiftsComponent_C_StartNeutralTimer::OverrideTime' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_StartNeutralTimer, Temp_bool_Variable) == 0x000010, "Member 'BP_GiftsComponent_C_StartNeutralTimer::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_StartNeutralTimer, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'BP_GiftsComponent_C_StartNeutralTimer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_StartNeutralTimer, K2Node_Select_Default) == 0x000024, "Member 'BP_GiftsComponent_C_StartNeutralTimer::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_StartNeutralTimer, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000028, "Member 'BP_GiftsComponent_C_StartNeutralTimer::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_StartNeutralTimer, K2Node_Select_Option_1_ImplicitCast) == 0x000030, "Member 'BP_GiftsComponent_C_StartNeutralTimer::K2Node_Select_Option_1_ImplicitCast' has a wrong offset!");

// Function BP_GiftsComponent.BP_GiftsComponent_C.StartOrderTimer
// 0x0038 (0x0038 - 0x0000)
struct BP_GiftsComponent_C_StartOrderTimer final
{
public:
	bool                                          OverrideTimer;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        OverrideTime;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Option_1_ImplicitCast;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GiftsComponent_C_StartOrderTimer) == 0x000008, "Wrong alignment on BP_GiftsComponent_C_StartOrderTimer");
static_assert(sizeof(BP_GiftsComponent_C_StartOrderTimer) == 0x000038, "Wrong size on BP_GiftsComponent_C_StartOrderTimer");
static_assert(offsetof(BP_GiftsComponent_C_StartOrderTimer, OverrideTimer) == 0x000000, "Member 'BP_GiftsComponent_C_StartOrderTimer::OverrideTimer' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_StartOrderTimer, OverrideTime) == 0x000008, "Member 'BP_GiftsComponent_C_StartOrderTimer::OverrideTime' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_StartOrderTimer, Temp_bool_Variable) == 0x000010, "Member 'BP_GiftsComponent_C_StartOrderTimer::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_StartOrderTimer, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'BP_GiftsComponent_C_StartOrderTimer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_StartOrderTimer, K2Node_Select_Default) == 0x000024, "Member 'BP_GiftsComponent_C_StartOrderTimer::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_StartOrderTimer, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000028, "Member 'BP_GiftsComponent_C_StartOrderTimer::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GiftsComponent_C_StartOrderTimer, K2Node_Select_Option_1_ImplicitCast) == 0x000030, "Member 'BP_GiftsComponent_C_StartOrderTimer::K2Node_Select_Option_1_ImplicitCast' has a wrong offset!");

}

