#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SquadAI_Leash

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Hemingway_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SquadAI_Leash.BP_SquadAI_Leash_C
// 0x00A8 (0x03A8 - 0x0300)
class ABP_SquadAI_Leash_C final : public AHWAISquadManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0300(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         SuspiciousTargets;                                 // 0x0310(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AActor*>                         HostileTargetList;                                 // 0x0320(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        HostileTargetRange;                                // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      LeashCollision;                                    // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAggressive;                                      // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATriggerVolume*                         LeashVol;                                          // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UPrimitiveComponent*>            LeashComps;                                        // 0x0350(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMulticastInlineDelegate<void(class AActor* NewTarget)> HostileTargetAcquired;                   // 0x0360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class AActor* DroppedTarget)> HostileTargetDropped;                // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class AActor* NewTarget)> SuspiciousTargetAcquired;                // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class AActor* DroppedTarget)> SuspiciousTargetDropped;             // 0x0390(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          ShouldChooseClosest;                               // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BindSquadMemberEvents();
	void BindToLeashComponentEvents();
	void BindToLeashVolumeEvents();
	void CheckInsideLeash(class AActor* ActorToCheck, bool* IsInsideLeash);
	void DropTarget(class AActor* TargetToDrop);
	void ExecuteUbergraph_BP_SquadAI_Leash(int32 EntryPoint);
	void GetHostileTarget(class AActor** HostileTarget, bool* Success);
	void HasHostileTargets(bool* HasHostileTargets_0);
	void IsHostileTargetWithinRange(class AActor* HostileTarget, double Range, bool* IsWithinRange);
	void NewHostileTarget(class AActor* NewTarget);
	void OnLeashCompEntered_Del(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnLeashCompExited_Del(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnLeashVolEntered_Del(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnLeashVolExited_Del(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnSquadMemberAdded(class AHWCharacter_NPC* Character);
	void OnSquadMemberDamaged_Del(const struct FDamageEventData& DamageEventData);
	void ReceiveBeginPlay();
	void RegisterTargetInLeash(class AActor* NewTarget);
	void RepopulateHostileTargetArray();
	void RepopulateHostileTargetArrayBasedOnDistance();
	void RetrieveLeash();
	void SelectClosestSuspiciousTarget(TArray<class AActor*>& SuspiciousTargets_0, class AActor** SuspciousTarget, bool* Success);
	void SortHostileTargets(class AActor** HostileTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SquadAI_Leash_C">();
	}
	static class ABP_SquadAI_Leash_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SquadAI_Leash_C>();
	}
};
static_assert(alignof(ABP_SquadAI_Leash_C) == 0x000008, "Wrong alignment on ABP_SquadAI_Leash_C");
static_assert(sizeof(ABP_SquadAI_Leash_C) == 0x0003A8, "Wrong size on ABP_SquadAI_Leash_C");
static_assert(offsetof(ABP_SquadAI_Leash_C, UberGraphFrame) == 0x000300, "Member 'ABP_SquadAI_Leash_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SquadAI_Leash_C, DefaultSceneRoot) == 0x000308, "Member 'ABP_SquadAI_Leash_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SquadAI_Leash_C, SuspiciousTargets) == 0x000310, "Member 'ABP_SquadAI_Leash_C::SuspiciousTargets' has a wrong offset!");
static_assert(offsetof(ABP_SquadAI_Leash_C, HostileTargetList) == 0x000320, "Member 'ABP_SquadAI_Leash_C::HostileTargetList' has a wrong offset!");
static_assert(offsetof(ABP_SquadAI_Leash_C, HostileTargetRange) == 0x000330, "Member 'ABP_SquadAI_Leash_C::HostileTargetRange' has a wrong offset!");
static_assert(offsetof(ABP_SquadAI_Leash_C, LeashCollision) == 0x000338, "Member 'ABP_SquadAI_Leash_C::LeashCollision' has a wrong offset!");
static_assert(offsetof(ABP_SquadAI_Leash_C, IsAggressive) == 0x000340, "Member 'ABP_SquadAI_Leash_C::IsAggressive' has a wrong offset!");
static_assert(offsetof(ABP_SquadAI_Leash_C, LeashVol) == 0x000348, "Member 'ABP_SquadAI_Leash_C::LeashVol' has a wrong offset!");
static_assert(offsetof(ABP_SquadAI_Leash_C, LeashComps) == 0x000350, "Member 'ABP_SquadAI_Leash_C::LeashComps' has a wrong offset!");
static_assert(offsetof(ABP_SquadAI_Leash_C, HostileTargetAcquired) == 0x000360, "Member 'ABP_SquadAI_Leash_C::HostileTargetAcquired' has a wrong offset!");
static_assert(offsetof(ABP_SquadAI_Leash_C, HostileTargetDropped) == 0x000370, "Member 'ABP_SquadAI_Leash_C::HostileTargetDropped' has a wrong offset!");
static_assert(offsetof(ABP_SquadAI_Leash_C, SuspiciousTargetAcquired) == 0x000380, "Member 'ABP_SquadAI_Leash_C::SuspiciousTargetAcquired' has a wrong offset!");
static_assert(offsetof(ABP_SquadAI_Leash_C, SuspiciousTargetDropped) == 0x000390, "Member 'ABP_SquadAI_Leash_C::SuspiciousTargetDropped' has a wrong offset!");
static_assert(offsetof(ABP_SquadAI_Leash_C, ShouldChooseClosest) == 0x0003A0, "Member 'ABP_SquadAI_Leash_C::ShouldChooseClosest' has a wrong offset!");

}

